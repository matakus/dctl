#include "zCCTF.dctl"
#line 3 // This line makes line numbers appear correctly in the log file


// Define UI Parameters
DEFINE_UI_PARAMS(p_ColorspaceIn, Colorspace In, DCTLUI_COMBO_BOX, 7, {ACES_CGIn, ACES_CCTIn, AppleLogIn, ArriWideGamut3In, ArriWideGamut4In, BlackMagicWideGamutGen5In, CanonCinemaGamutIn, DaVinciWideGamutIn, DCIP3In, DGamutIn, FilmLightEGamutIn, FujiFGamutIn, P3D65In, PanasonicVGamutIn, Rec2020In, Rec709In, RedWideGamutIn, SGamut3In, SGamut3CineIn, SGamut3VeniceIn, SGamut3VeniceCineIn}, {ACES CG, ACES CCT, Apple Log, Arri Wide Gamut 3, Arri Wide Gamut 4, BlackMagic Wide Gamut Gen5, Canon Cinema Gamut, DaVinci Wide Gamut, DCI-P3, DJI D-Gamut, FilmLight E-Gamut, Fuji F Gamut, P3-D65, Panasonic V-Gamut, Rec.2020, Rec.709, Red Wide Gamut, S-Gamut3, S-Gamut3.Cine, S-Gamut3 Venice, S-Gamut3 Venice.Cine})
DEFINE_UI_PARAMS(p_TransferFunctionIn, Gamma In, DCTLUI_COMBO_BOX, 10, {acesCCIn, acesCCTIn, appleLogIn, arriLogC3In, arriLogC4In, blackmagicFilmGen5In, canonLogIn, canonLog2In, canonLog3In, cineonIn, davinciIntermediateIn, djiDLogIn, filmLightTLogIn, fLogIn, fLog2In, goproProtuneIn, leicaLogIn, nLogIn, vLogIn, rec2020In, rec709In, redLog3G10In, sonySLogIn, sonySLog2In, sonySLog3In, st2084PQIn}, {ACEScc, ACEScct, Apple Log, Arri LogC3, Arri LogC4, Blackmagic Film Gen5, Canon Log, Canon Log 2, Canon Log 3, Cineon, DaVinci Intermediate, DJI D-Log, FilmLight T-Log, Fuji F-Log, Fuji F-Log2, GoPro Protune, Leica Log, Nikon N-Log, Panasonic V-Log, Rec.2020, Rec.709, Red Log3G10, Sony S-Log, Sony S-Log2, Sony S-Log3, ST.2084 (PQ)})
DEFINE_UI_PARAMS(p_ColorspaceOut, Colorspace Out, DCTLUI_COMBO_BOX, 15, {ACES_CGOut, ACES_CCTOut, AppleLogOut, ArriWideGamut3Out, ArriWideGamut4Out, BlackMagicWideGamutGen5Out, CanonCinemaGamutOut, DaVinciWideGamutOut, DCIP3Out, DGamutOut, FilmLightEGamutOut, FujiFGamutOut, P3D65Out, PanasonicVGamutOut, Rec2020Out, Rec709Out, RedWideGamutOut, SGamut3Out, SGamut3CineOut, SGamut3VeniceOut, SGamut3VeniceCineOut}, {ACES CG, ACES CCT, Apple Log, Arri Wide Gamut 3, Arri Wide Gamut 4, BlackMagic Wide Gamut Gen5, Canon Cinema Gamut, DaVinci Wide Gamut, DCI-P3, DJI D-Gamut, FilmLight E-Gamut, Fuji F Gamut, P3-D65, Panasonic V-Gamut, Rec.2020, Rec.709, Red Wide Gamut, S-Gamut3, S-Gamut3.Cine, S-Gamut3 Venice, S-Gamut3 Venice.Cine})
DEFINE_UI_PARAMS(p_TransferFunctionOut, Gamma Out, DCTLUI_COMBO_BOX, 20, {acesCCOut, acesCCTOut, appleLogOut, arriLogC3Out, arriLogC4Out, blackmagicFilmGen5Out, canonLogOut, canonLog2Out, canonLog3Out, cineonOut, davinciIntermediateOut, djiDLogOut, filmLightTLogOut, fLogOut, fLog2Out, goproProtuneOut, leicaLogOut, nLogOut, vLogOut, rec2020Out, rec709Out, redLog3G10Out, sonySLogOut, sonySLog2Out, sonySLog3Out, st2084PQOut}, {ACEScc, ACEScct, Apple Log, Arri LogC3, Arri LogC4, Blackmagic Film Gen5, Canon Log, Canon Log 2, Canon Log 3, Cineon, DaVinci Intermediate, DJI D-Log, FilmLight T-Log, Fuji F-Log, Fuji F-Log2, GoPro Protune, Leica Log, Nikon N-Log, Panasonic V-Log, Rec.2020, Rec.709, Red Log3G10, Sony S-Log, Sony S-Log2, Sony S-Log3, ST.2084 (PQ)})
DEFINE_UI_PARAMS(p_ToneMapping, Tone Mapping, DCTLUI_COMBO_BOX, 3, {toneMapACESOption, toneMapAcesHybridOption, toneMapDavinciOption, toneMapDavinciHybridOption, toneMapFilmicOption,  toneMapFilmicHybridOption, toneMapNone, toneMapReinhardOption}, {ACES, ACES Hybrid, DaVinci, Davinci Hybrid,  Filmic,  Filmic Hybrid, None, Reinhard})
DEFINE_UI_PARAMS(p_gamutCompression, Gamut Compression, DCTLUI_COMBO_BOX, 1, {gamutCompNone, gamutCompSaturationPreserving}, {None, Saturation Preserving})

// Tone Mapping Functions

// Reinhard Tone Mapping
__DEVICE__ float3 applyReinhardToneMapping(float3 in) {
    float luminance = (0.2126f * in.x) + (0.7152f  * in.y) + (0.0722f * in.z);
    float toneMappedLuminance = luminance / (1.0f + luminance);
    float3 toneMappedColor = in * (toneMappedLuminance / luminance);
    return toneMappedColor;
}

// DaVinci Tone Mapping

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

__DEVICE__ float contrast(float x, float mid_gray, float gamma) {
    return mid_gray * powf(x / mid_gray, gamma);
}

// g(x) = a * (x / (x+b)) + c
__DEVICE__ float rolloff_function(float x, float a, float b) {
    return a * (x / (x + b));
}


__DEVICE__ float3 applyDavinciToneMapping(float3 in, int p_TransferFunctionIn, int p_TransferFunctionOut) {
    // Declare input_white and output_white before the if statements
    float input_white;
    float output_white;

    // Set input_white based on the input transfer function
    if (p_TransferFunctionIn == rec709In) {
        input_white = 100.0f / 100.00;
    } else {
        input_white = 10000.0f / 100.00;
    }

    // Set output_white based on the output transfer function
    if (p_TransferFunctionOut == rec709Out) {
        output_white = 100.0f / 100.00;
    } else {
        output_white = 10000.0f / 100.00;
    }

    float adaptation = 9.0;

    float3 out = in;
    float b = (input_white - (adaptation / 100.0) * (input_white / output_white)) / ((input_white / output_white) - 1);

    // Constraint 1: f(W_in) = W_out
    float a = output_white / (input_white / (input_white + b));
    if (input_white != output_white) {
        out.x = rolloff_function(out.x, a, b);
        out.y = rolloff_function(out.y, a, b);
        out.z = rolloff_function(out.z, a, b);
    }

    out.x = clamp(out.x, 0.0f, output_white);
    out.y = clamp(out.y, 0.0f, output_white);
    out.z = clamp(out.z, 0.0f, output_white);

    return out;
}



// ACES Tone Mapping Functions
__DEVICE__ float3 mul_aces_input_matrix(float3 v) {
    float x = 0.59719f * v.x + 0.35458f * v.y + 0.04823f * v.z;
    float y = 0.07600f * v.x + 0.90834f * v.y + 0.01566f * v.z;
    float z = 0.02840f * v.x + 0.13383f * v.y + 0.83777f * v.z;
    return make_float3(x, y, z);
}

__DEVICE__ float3 mul_aces_output_matrix(float3 v) {
    float x =  1.60475f * v.x + -0.53108f * v.y + -0.07367f * v.z;
    float y = -0.10208f * v.x +  1.10813f * v.y + -0.00605f * v.z;
    float z = -0.00327f * v.x + -0.07276f * v.y +  1.07602f * v.z;
    return make_float3(x, y, z);
}

__DEVICE__ float3 rtt_and_odt_fit(float3 v) {
    float3 a = v * (v + 0.0245786f) - 0.000090537f;
    float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

__DEVICE__ float3 applyAcesToneMapping(float3 color) {
    color = mul_aces_input_matrix(color);
    color = rtt_and_odt_fit(color);
    return mul_aces_output_matrix(color);
}

// Filmic Tone Mapping Function
__DEVICE__ float3 applyFilmicToneMapping(float3 x) {
    const float A = 0.22f;
    const float B = 0.30f;
    const float C = 0.10f;
    const float D = 0.20f;
    const float E = 0.01f;
    const float F = 0.30f;

    float3 color;
    color.x = ((x.x * (A * x.x + C * B) + D * E) / (x.x * (A * x.x + B) + D * F)) - E / F;
    color.y = ((x.y * (A * x.y + C * B) + D * E) / (x.y * (A * x.y + B) + D * F)) - E / F;
    color.z = ((x.z * (A * x.z + C * B) + D * E) / (x.z * (A * x.z + B) + D * F)) - E / F;

    return color;
}

// Function to calculate saturation
__DEVICE__ float calculateSaturation(float3 in) {
    float max_rgb = max(in.x, max(in.y, in.z));
    float min_rgb = min(in.x, min(in.y, in.z));
    return (max_rgb - min_rgb) / max_rgb;
}

// Main blending function
__DEVICE__ float3 blendToneMappings(float3 in, int toneMappingOption, int p_TransferFunctionIn, int p_TransferFunctionOut) {
    // Calculate saturation from linear input
    float saturation = calculateSaturation(in);

    // Apply Reinhard tone mapping
    float3 reinhard = applyReinhardToneMapping(in);

    // Apply selected tone mapping
    float3 selectedToneMapped;
    if (toneMappingOption == toneMapACESOption) {
        selectedToneMapped = applyAcesToneMapping(in);
    } else if (toneMappingOption == toneMapDavinciOption) {
        selectedToneMapped = applyDavinciToneMapping(in, p_TransferFunctionIn, p_TransferFunctionOut);
    } else if (toneMappingOption == toneMapFilmicOption) {
        selectedToneMapped = applyFilmicToneMapping(in);
    } else if (toneMappingOption == toneMapReinhardOption) {
        return reinhard; // Only Reinhard tone mapping
    } else if (toneMappingOption == toneMapNone) {
        return in; // No tone mapping
    } else if (toneMappingOption == toneMapDavinciHybridOption) {
        // Hybrid (DaVinci + Reinhard)
        selectedToneMapped = applyDavinciToneMapping(in, p_TransferFunctionIn, p_TransferFunctionOut);
    } else if (toneMappingOption == toneMapFilmicHybridOption) {
        // Hybrid Filmic (Filmic + Reinhard)
        selectedToneMapped = applyFilmicToneMapping(in);
    } else if (toneMappingOption == toneMapAcesHybridOption) {
        // Hybrid ACES (ACES + Reinhard)
        selectedToneMapped = applyAcesToneMapping(in);
    } else {
        selectedToneMapped = in; // Default to input if not matched
    }

    // Blend between Reinhard and selected tone mapping based on saturation
    float3 blended;
    float reinhard_factor = smoothstep(0.6f, 1.0f, saturation); // Only highly saturated pixels get more Reinhard tone mapping
    blended.x = reinhard.x * reinhard_factor + selectedToneMapped.x * (1.0f - reinhard_factor);
    blended.y = reinhard.y * reinhard_factor + selectedToneMapped.y * (1.0f - reinhard_factor);
    blended.z = reinhard.z * reinhard_factor + selectedToneMapped.z * (1.0f - reinhard_factor);

    return blended;
}

// Smoothstep function for smooth transition
__DEVICE__ float smoothstep(float edge0, float edge1, float x) {
    x = clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f);
    return x * x * (3 - 2 * x);
}


// Gamut Compression Functions

__DEVICE__ float smoothStep(float edge0, float edge1, float x) {
    x = clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f);
    return x * x * (3 - 2 * x);
}

__DEVICE__ float compressValue(float x, float t, float s, float p) {
    if (x > t) {
        float normalized = (x - t) / s;
        float compressed = t + s * normalized / pow(1.0f + pow(normalized, p), 1.0f / p);
        return compressed;
    }
    return x;
}

__DEVICE__ float3 compressGamut(float3 in) {
    float threshold = 0.0f;
    float max_distance_r = 1.0;
    float max_distance_g = 1.0f;
    float max_distance_b = 1.0f;
    float aggressiveness = 0.5f;
    float luminance_strength = 1.0f;
    // Calculate chroma (distance from achromatic axis)
    float max_rgb = max(in.x, max(in.y, in.z));
    float min_rgb = min(in.x, min(in.y, in.z));
    float chroma = max_rgb - min_rgb;

    // Determine achromatic component
    float achromatic = (in.x + in.y + in.z) / 3.0f;

    // Calculate the distances
    float distance_r = in.x - achromatic;
    float distance_g = in.y - achromatic;
    float distance_b = in.z - achromatic;

    // Compress distances using the provided compression function
    distance_r = compressValue(distance_r, threshold, max_distance_r - threshold, aggressiveness);
    distance_g = compressValue(distance_g, threshold, max_distance_g - threshold, aggressiveness);
    distance_b = compressValue(distance_b, threshold, max_distance_b - threshold, aggressiveness);

    // Adjust the luminance compression strength
    float compressed_achromatic = achromatic + luminance_strength * (min_rgb + chroma / 2.0f - achromatic);

    // Reconstruct the RGB components from the compressed distances
    float3 compressed_rgb;
    compressed_rgb.x = compressed_achromatic + distance_r;
    compressed_rgb.y = compressed_achromatic + distance_g;
    compressed_rgb.z = compressed_achromatic + distance_b;

    // Apply smooth transition using manual interpolation
    float transition = smoothStep(threshold, max_distance_r, chroma);
    float3 out;
    out.x = in.x * (1.0f - transition) + compressed_rgb.x * transition;
    out.y = in.y * (1.0f - transition) + compressed_rgb.y * transition;
    out.z = in.z * (1.0f - transition) + compressed_rgb.z * transition;

    return out;
}


// Helper Functions

//Transfer function convertion
__DEVICE__ float3 convertToLinear(float3 in, int transferFunc) {
    if (transferFunc == acesCCIn) return logToLinACEScc(in);
    if (transferFunc == acesCCTIn) return logToLinACEScct(in);
    if (transferFunc == appleLogIn) return logToLinAppleLogProfile(in);
    if (transferFunc == arriLogC3In) return logToLinArriLogC3(in);
    if (transferFunc == arriLogC4In) return logToLinArriLogC4(in);
    if (transferFunc == blackmagicFilmGen5In) return logToLinBlackmagicFilmGen5(in);
    if (transferFunc == canonLogIn) return logToLinCanonLog(in);
    if (transferFunc == canonLog2In) return logToLinCanonLog2(in);
    if (transferFunc == canonLog3In) return logToLinCanonLog3(in);
    if (transferFunc == cineonIn) return logToLinCineon(in);
    if (transferFunc == djiDLogIn) return logToLinDJIDLog(in);
    if (transferFunc == filmLightTLogIn) return logToLinFilmLightTLog(in);
    if (transferFunc == fLogIn) return logToLinFLog(in);
    if (transferFunc == fLog2In) return logToLinFLog2(in);
    if (transferFunc == goproProtuneIn) return logToLinProtune(in);
    if (transferFunc == leicaLogIn) return logToLinLeicaLog(in);
    if (transferFunc == nLogIn) return logToLinNLog(in);
    if (transferFunc == rec709In) return logToLinRec709(in);
    if (transferFunc == rec2020In) return logToLinRec2020(in);
    if (transferFunc == redLog3G10In) return logToLinRedLog3g10(in);
    if (transferFunc == sonySLogIn) return logToLinSonySLog(in);
    if (transferFunc == sonySLog2In) return logToLinSonySLog2(in);
    if (transferFunc == sonySLog3In) return logToLinSonySLog3(in);
    if (transferFunc == st2084PQIn) return logToLinPQ(in);
    if (transferFunc == vLogIn) return logToLinVLog(in);
    if (transferFunc == davinciIntermediateIn) return logToLinDavinciIntermediate(in);
    return in; // Default case, return input as-is
}

__DEVICE__ float3 convertToLog(float3 in, int transferFunc) {
    if (transferFunc == acesCCOut) return linToLogACEScc(in);
    if (transferFunc == acesCCTOut) return linToLogACEScct(in);
    if (transferFunc == appleLogOut) return linToLogAppleLogProfile(in);
    if (transferFunc == arriLogC3Out) return linToLogArriLogC3(in);
    if (transferFunc == arriLogC4Out) return linToLogArriLogC4(in);
    if (transferFunc == blackmagicFilmGen5Out) return linToLogBlackmagicFilmGen5(in);
    if (transferFunc == canonLogOut) return linToLogCanonLog(in);
    if (transferFunc == canonLog2Out) return linToLogCanonLog2(in);
    if (transferFunc == canonLog3Out) return linToLogCanonLog3(in);
    if (transferFunc == cineonOut) return linToLogCineon(in);
    if (transferFunc == djiDLogOut) return linToLogDJIDLog(in);
    if (transferFunc == filmLightTLogOut) return linToLogFilmLightTLog(in);
    if (transferFunc == fLogOut) return linToLogFLog(in);
    if (transferFunc == fLog2Out) return linToLogFLog2(in);
    if (transferFunc == goproProtuneOut) return linToLogProtune(in);
    if (transferFunc == leicaLogOut) return linToLogLeicaLog(in);
    if (transferFunc == nLogOut) return linToLogNLog(in);
    if (transferFunc == rec709Out) return linToLogRec709(in);
    if (transferFunc == rec2020Out) return linToLogRec2020(in);
    if (transferFunc == redLog3G10Out) return linToLogRedLog3g10(in);
    if (transferFunc == sonySLogOut) return linToLogSonySLog(in);
    if (transferFunc == sonySLog2Out) return linToLogSonySLog2(in);
    if (transferFunc == sonySLog3Out) return linToLogSonySLog3(in);
    if (transferFunc == st2084PQOut) return linToLogPQ(in);
    if (transferFunc == vLogOut) return linToLogVLog(in);
    if (transferFunc == davinciIntermediateOut) return linToLogDavinciIntermediate(in);
    return in; // Default case, return input as-is
}


// Colorspace Conversion
__DEVICE__ float3 convertColorspaceToXYZ(float3 in, int colorspaceIn) {
    if (colorspaceIn == ACES_CGIn) return ACES_CGtoXYZ(in);
    if (colorspaceIn == ACES_CCTIn) return ACES_CCTtoXYZ(in);
    if (colorspaceIn == AppleLogIn) return AppleLogtoXYZ(in);
    if (colorspaceIn == ArriWideGamut3In) return ArriWideGamut3toXYZ(in);
    if (colorspaceIn == ArriWideGamut4In) return ArriWideGamut4toXYZ(in);
    if (colorspaceIn == BlackMagicWideGamutGen5In) return BlackMagicWideGamutGen5toXYZ(in);
    if (colorspaceIn == CanonCinemaGamutIn) return CanonCinemaGamuttoXYZ(in);
    if (colorspaceIn == DaVinciWideGamutIn) return DaVinciWideGamuttoXYZ(in);
    if (colorspaceIn == DGamutIn) return DJIDGamuttoXYZ(in);
    if (colorspaceIn == FilmLightEGamutIn) return FilmLightEGamuttoXYZ(in);
    if (colorspaceIn == FujiFGamutIn) return FujiFGamuttoXYZ(in);
    if (colorspaceIn == P3D65In) return P3D65toXYZ(in);
    if (colorspaceIn == PanasonicVGamutIn) return PanasonicVGamuttoXYZ(in);
    if (colorspaceIn == RedWideGamutIn) return RedWideGamuttoXYZ(in);
    if (colorspaceIn == SGamut3In) return SGamut3toXYZ(in);
    if (colorspaceIn == SGamut3CineIn) return SGamut3CinetoXYZ(in);
    if (colorspaceIn == SGamut3VeniceIn) return SGamut3VenicetoXYZ(in);
    if (colorspaceIn == SGamut3VeniceCineIn) return SGamut3VeniceCinetoXYZ(in);
    if (colorspaceIn == Rec709In) return Rec709toXYZ(in);
    if (colorspaceIn == Rec2020In) return Rec2020toXYZ(in);
    if (colorspaceIn == DCIP3In) return DCIP3toXYZ(in);
    return in; // Default case, return input as-is
}

__DEVICE__ float3 convertXYZToColorspace(float3 in, int colorspaceOut) {
   if (colorspaceOut == ACES_CGOut) return XYZtoACES_CG(in);
    if (colorspaceOut == ACES_CCTOut) return XYZtoACES_CCT(in);
    if (colorspaceOut == AppleLogOut) return XYZtoAppleLog(in);
    if (colorspaceOut == ArriWideGamut3Out) return XYZtoArriWideGamut3(in);
    if (colorspaceOut == ArriWideGamut4Out) return XYZtoArriWideGamut4(in);
    if (colorspaceOut == BlackMagicWideGamutGen5Out) return XYZtoBlackMagicWideGamutGen5(in);
    if (colorspaceOut == CanonCinemaGamutOut) return XYZtoCanonCinemaGamut(in);
    if (colorspaceOut == DaVinciWideGamutOut) return XYZtoDaVinciWideGamut(in);
    if (colorspaceOut == DGamutOut) return XYZtoDJIDGamut(in);
    if (colorspaceOut == FilmLightEGamutOut) return XYZtoFilmLightEGamut(in);
    if (colorspaceOut == FujiFGamutOut) return XYZtoFujiFGamut(in);
    if (colorspaceOut == P3D65Out) return XYZtoP3D65(in);
    if (colorspaceOut == PanasonicVGamutOut) return XYZtoPanasonicVGamut(in);
    if (colorspaceOut == RedWideGamutOut) return XYZtoRedWideGamut(in);
    if (colorspaceOut == SGamut3Out) return XYZtoSGamut3(in);
    if (colorspaceOut == SGamut3CineOut) return XYZtoSGamut3Cine(in);
    if (colorspaceOut == SGamut3VeniceOut) return XYZtoSGamut3Venice(in);
    if (colorspaceOut == SGamut3VeniceCineOut) return XYZtoSGamut3VeniceCine(in);
    if (colorspaceOut == Rec709Out) return XYZtoRec709(in);
    if (colorspaceOut == Rec2020Out) return XYZtoRec2020(in);
    if (colorspaceOut == DCIP3Out) return XYZtoDCIP3(in);
    return in; // Default case, return input as-is
}


// Main Function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 out = make_float3(p_R, p_G, p_B);
    // Convert from the encoded Transfer Function to linear
    out = convertToLinear(out, p_TransferFunctionIn);
    

// Apply tone mapping if enabled
if (p_ToneMapping == toneMapACESOption) {
    out = applyAcesToneMapping(out);
} else if (p_ToneMapping == toneMapDavinciOption) {
    out = applyDavinciToneMapping(out, p_TransferFunctionIn, p_TransferFunctionOut);
} else if (p_ToneMapping == toneMapFilmicOption) {
    out = applyFilmicToneMapping(out);
} else if (p_ToneMapping == toneMapReinhardOption) {
    out = applyReinhardToneMapping(out);
} else if (p_ToneMapping == toneMapDavinciHybridOption) {
    out = blendToneMappings(out, p_ToneMapping, p_TransferFunctionIn, p_TransferFunctionOut);
} else if (p_ToneMapping == toneMapFilmicHybridOption) {
    out = blendToneMappings(out, p_ToneMapping, p_TransferFunctionIn, p_TransferFunctionOut);
} else if (p_ToneMapping == toneMapAcesHybridOption) {
    out = blendToneMappings(out, p_ToneMapping, p_TransferFunctionIn, p_TransferFunctionOut);
}

    // Convert from Colorspace In to XYZ
    out = convertColorspaceToXYZ(out, p_ColorspaceIn);

    // Gamut Compression

if (p_gamutCompression == gamutCompSaturationPreserving) {
    out = compressGamut(out);
}
    
    // Convert from XYZ to Colorspace Out
    out = convertXYZToColorspace(out, p_ColorspaceOut);

    // Convert from linear back to the encoded Transfer Function
    out = convertToLog(out, p_TransferFunctionOut);

    // Draw a green line at the bottom to indicate the DCTL is running without errors
    //if (p_Y < 10) out = make_float3(0, 1, 0);

    return out;
}
