#line 2

// Color Temperature Adjustment DCTL v1.05
// Author: Matt.C
// Description: Adjusts color temperature based on Black Body Radiator model with support
// for multiple color spaces and transfer functions

#include "zCCTF.dctl"

//------------------------------------------------------------------------------
// UI Parameters
//------------------------------------------------------------------------------

// Temperature Controls
DEFINE_UI_PARAMS(p_InputTemperature, Source Kelvin, DCTLUI_SLIDER_FLOAT, 6500.0, 2000.0, 11000.0, 10.0)
DEFINE_UI_TOOLTIP(Source Kelvin, "Source Temperture in Kelvin")
DEFINE_UI_PARAMS(p_Temperature, Target Kelvin, DCTLUI_SLIDER_FLOAT, 6500.0, 2000.0, 11000.0, 10.0)
DEFINE_UI_TOOLTIP(Target Kelvin, "Target Temperture in Kelvin")
DEFINE_UI_PARAMS(p_Tint, Tint - Green / Magenta, DCTLUI_SLIDER_FLOAT, 0.0, -150.0, 150.0, 1.0)
DEFINE_UI_TOOLTIP(Tint - Green / Magenta, "Add or subtract green or magenta to the image")

// Mode Selection
DEFINE_UI_PARAMS(p_Mode, White Balance Mode, DCTLUI_COMBO_BOX, 0, {Temperature, Custom, Average}, {Temperature Based, Custom White Balance, Auto Average (Slow)})
DEFINE_UI_TOOLTIP(White Balance Mode, "Method used to adjust the white balance")

// Sampling Parameters
DEFINE_UI_PARAMS(sample_block_size, Sample Block Size, DCTLUI_SLIDER_INT, 32, 32, 256, 32)
DEFINE_UI_TOOLTIP(Sample Block Size, "Sizes of the blocks used for averaging")
DEFINE_UI_PARAMS(p_ShowAvgBox, Show Input Average, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_TOOLTIP(Show Input Average, "Shows the average color of the input image based on the Sample Block Size"))

// Color Space Selection
DEFINE_UI_PARAMS(p_SourceInput, Source Input, DCTLUI_COMBO_BOX, 10, {Aces2065, AcesCCT_AP1, AcesCG_AP1, AppleLog_Rec2020, ArriLogC3_AWG3, ArriLogC4_AWG4, BlackmagicFilmGen5_BMWideGamut, CanonLog2_CanonCinemaGamut, CanonLog3_CanonCinemaGamut, DaVinciIntermediate_DWG, DJI_DLog_DGamut, FilmlightTLog_EGamut, FujiFLog_FGamut, FujiFLog2_FGamut, GoProProtune_GoProGamut, LeicaLLog_Rec2020, PanasonicVLog_VGamut, RedLog3G10_RWG, SonySLog2_SGamut, SonySLog3_SGamut, SonySLog3_SGamutCine, SonySLog3_SGamutVenice, SonySLog3_SGamutVeniceCine}, {Aces2065-1 (AP0) / Linear, Aces CCT (AP1), Aces CG (AP1), Apple Log / Rec2020, Arri LogC3 / AWG3, Arri LogC4 / AWG4, Blackmagic Film Gen5 / BM Wide Gamut, Canon Log 2 / Canon Cinema Gamut, Canon Log 3 / Canon Cinema Gamut, DaVinci Intermediate / DWG, DJI D-Log / D-Gamut, Filmlight T-Log / E-Gamut, Fuji F-Log / F-Gamut, Fuji F-Log2 / F-Gamut, GoPro Protune / GoPro Gamut, Leica L-Log / Rec2020, Panasonic V-Log / V-Gamut, Red Log3G10 / RWG, Sony S-Log2 / S-Gamut 3, Sony S-Log3 / S-Gamut 3, Sony S-Log3 / S-Gamut 3.Cine, Sony S-Log3 / S-Gamut 3 Venice, Sony S-Log3 / S-Gamut 3.Cine Venice})
DEFINE_UI_TOOLTIP(Source Input, "Source Input Color Space and Transfer Function")

// Custom White Balance Color Picker
DEFINE_UI_PARAMS(tgtColor, Custom White Balance, DCTLUI_COLOR_PICKER, 0.5f, 0.5f, 0.5f)
DEFINE_UI_TOOLTIP(Custom White Balance, "Pick target white balance color")

//------------------------------------------------------------------------------
// Matrix Operations
//------------------------------------------------------------------------------

// Performs 3x3 matrix multiplication with a vector
// @param in Input vector
// @param mat 3x3 matrix in row-major order
// @return Transformed vector
__DEVICE__ float3 multiplyMatrix(float3 in, const float mat[9]) {
    return make_float3(
        in.x * mat[0] + in.y * mat[1] + in.z * mat[2],
        in.x * mat[3] + in.y * mat[4] + in.z * mat[5],
        in.x * mat[6] + in.y * mat[7] + in.z * mat[8]
    );
}

//------------------------------------------------------------------------------
// Temperature Conversion Functions
//------------------------------------------------------------------------------

// Converts color temperature to xy chromaticity coordinates and calculates derivatives
// @param temperature Color temperature in Kelvin
// @param x_out Output x chromaticity coordinate
// @param y_out Output y chromaticity coordinate
// @param dx_dT_out Output derivative of x with respect to temperature
// @param dy_dT_out Output derivative of y with respect to temperature
__DEVICE__ void temperatureToXYandDerivatives(float temperature, thread float* x_out, thread float* y_out, 
    thread float* dx_dT_out, thread float* dy_dT_out) {
    // Initialize all variables
    float x = 0.0f, y = 0.0f, dx_dT = 0.0f, dy_dT = 0.0f;
    float temp_kelvin = temperature;

    // Calculate x coordinate and its derivative
    if (temp_kelvin <= 4000.0f) {
        x = (-0.2661239e9f / (temp_kelvin * temp_kelvin * temp_kelvin)) - (0.2343580e6f / (temp_kelvin * temp_kelvin)) + (0.8776956e3f / temp_kelvin) + 0.179910f;
        dx_dT = (0.7983717e9f / (temp_kelvin * temp_kelvin * temp_kelvin * temp_kelvin)) + (0.4687160e6f / (temp_kelvin * temp_kelvin * temp_kelvin)) - (0.8776956e3f / (temp_kelvin * temp_kelvin));
    } else {
        x = (-3.0258469e9f / (temp_kelvin * temp_kelvin * temp_kelvin)) + (2.1070379e6f / (temp_kelvin * temp_kelvin)) + (0.2226347e3f / temp_kelvin) + 0.240390f;
        dx_dT = (9.0775407e9f / (temp_kelvin * temp_kelvin * temp_kelvin * temp_kelvin)) - (4.2140758e6f / (temp_kelvin * temp_kelvin * temp_kelvin)) - (0.2226347e3f / (temp_kelvin * temp_kelvin));
    }

    // Calculate y coordinate and its derivative
    if (temp_kelvin <= 2222.0f) {
        y = -1.1063814f * (x * x * x) - 1.34811020f * (x * x) + 2.18555832f * x - 0.20219683f;
        float dy_dx = -3.3191442f * (x * x) - 2.69622040f * x + 2.18555832f;
        dy_dT = dy_dx * dx_dT;
    } else {
        y = -0.9549476f * (x * x * x) - 1.37418593f * (x * x) + 2.09137015f * x - 0.16748867f;
        float dy_dx = -2.8648428f * (x * x) - 2.74837186f * x + 2.09137015f;
        dy_dT = dy_dx * dx_dT;
    }

    // Output results
    *x_out = x;
    *y_out = y;
    *dx_dT_out = dx_dT;
    *dy_dT_out = dy_dT;
}

// Applies tint adjustment to chromaticity coordinates
// @param x_in_out Input/output x chromaticity coordinate
// @param y_in_out Input/output y chromaticity coordinate
// @param dx_dT Temperature derivative of x
// @param dy_dT Temperature derivative of y
// @param tint Tint adjustment value
__DEVICE__ void applyTintAdjustment(thread float* x_in_out, thread float* y_in_out, float dx_dT, float dy_dT, float tint) {
    // Calculate normal vector to blackbody locus
    float nx = -dy_dT;
    float ny = dx_dT;

    // Normalize vector
    float length = sqrt(nx * nx + ny * ny);
    if (length > 0.0f) {
        nx /= length;
        ny /= length;

        // Apply tint adjustment
        float tintAdjustment = tint * 0.0005f;
        *x_in_out += nx * tintAdjustment;
        *y_in_out += ny * tintAdjustment;
    }
}

//------------------------------------------------------------------------------
// Color Adaptation Functions
//------------------------------------------------------------------------------

// Applies CAT02 chromatic adaptation to adjust for different white points
// @param XYZ Input XYZ color
// @param sourceWhiteXYZ Source white point in XYZ
// @param targetWhiteXYZ Target white point in XYZ
// @return Adapted XYZ color
__DEVICE__ float3 applyCAT02Adaptation(float3 XYZ, float3 sourceWhiteXYZ, float3 targetWhiteXYZ) {
    // CAT02 and inverse matrices
    const float CAT02[9] = {
        0.7328f, 0.4296f, -0.1624f,
        -0.7036f, 1.6975f, 0.0061f,
        0.0030f, 0.0136f, 0.9834f
    };

    const float invCAT02[9] = {
        1.0961238f, -0.278869f, 0.182745f,
        0.454369f, 0.473533f, 0.072098f,
        -0.0096276f, -0.005698f, 1.015326f
    };

    // Convert to LMS space
    float3 LMS = multiplyMatrix(XYZ, CAT02);
    float3 LMS_sourceWhite = multiplyMatrix(sourceWhiteXYZ, CAT02);
    float3 LMS_targetWhite = multiplyMatrix(targetWhiteXYZ, CAT02);

    // Apply von Kries adaptation with safety checks
    float3 LMS_adapted;
    LMS_adapted.x = (LMS_sourceWhite.x != 0.0f) ? LMS.x * (LMS_targetWhite.x / LMS_sourceWhite.x) : LMS.x;
    LMS_adapted.y = (LMS_sourceWhite.y != 0.0f) ? LMS.y * (LMS_targetWhite.y / LMS_sourceWhite.y) : LMS.y;
    LMS_adapted.z = (LMS_sourceWhite.z != 0.0f) ? LMS.z * (LMS_targetWhite.z / LMS_sourceWhite.z) : LMS.z;

    // Convert back to XYZ
    return multiplyMatrix(LMS_adapted, invCAT02);
}

//------------------------------------------------------------------------------
// Conversion Functions
//------------------------------------------------------------------------------

// Struct to select appropriate conversion functions based on dropdown
struct ConversionFunctions {
    float3 (*logToLinFunc)(float3 in);
    float3 (*colorspaceToXYZFunc)(float3 in);
};

// Select appropriate input conversion functions based on source input
__DEVICE__ ConversionFunctions selectConversionFunctions(int sourceInput) {
    ConversionFunctions funcs;
    switch (sourceInput) {
        case 0: funcs.logToLinFunc = linear; funcs.colorspaceToXYZFunc = ACES2065toXYZ; break;
        case 1: funcs.logToLinFunc = logToLinACEScct; funcs.colorspaceToXYZFunc = ACES_CCTtoXYZ; break;
        case 2: funcs.logToLinFunc = logToLinACEScc; funcs.colorspaceToXYZFunc = ACES_CGtoXYZ; break;
        case 3: funcs.logToLinFunc = logToLinAppleLogProfile; funcs.colorspaceToXYZFunc = AppleLogtoXYZ; break;
        case 4: funcs.logToLinFunc = logToLinArriLogC3; funcs.colorspaceToXYZFunc = ArriWideGamut3toXYZ; break;
        case 5: funcs.logToLinFunc = logToLinArriLogC4; funcs.colorspaceToXYZFunc = ArriWideGamut4toXYZ; break;
        case 6: funcs.logToLinFunc = logToLinBlackmagicFilmGen5; funcs.colorspaceToXYZFunc = BlackMagicWideGamutGen5toXYZ; break;
        case 7: funcs.logToLinFunc = logToLinCanonLog2; funcs.colorspaceToXYZFunc = CanonCinemaGamuttoXYZ; break;
        case 8: funcs.logToLinFunc = logToLinCanonLog3; funcs.colorspaceToXYZFunc = CanonCinemaGamuttoXYZ; break;
        case 9: funcs.logToLinFunc = logToLinDavinciIntermediate; funcs.colorspaceToXYZFunc = DaVinciWideGamuttoXYZ; break;
        case 10: funcs.logToLinFunc = logToLinDJIDLog; funcs.colorspaceToXYZFunc = DJIDGamuttoXYZ; break;
        case 11: funcs.logToLinFunc = logToLinFilmLightTLog; funcs.colorspaceToXYZFunc = FilmLightEGamuttoXYZ; break;
        case 12: funcs.logToLinFunc = logToLinFLog; funcs.colorspaceToXYZFunc = FujiFGamuttoXYZ; break;
        case 13: funcs.logToLinFunc = logToLinFLog2; funcs.colorspaceToXYZFunc = FujiFGamuttoXYZ; break;
        case 14: funcs.logToLinFunc = logToLinProtune; funcs.colorspaceToXYZFunc = GoProProtuneToXYZ; break;
        case 15: funcs.logToLinFunc = logToLinLeicaLog; funcs.colorspaceToXYZFunc = Rec2020toXYZ; break;
        case 16: funcs.logToLinFunc = logToLinVLog; funcs.colorspaceToXYZFunc = PanasonicVGamuttoXYZ; break;
        case 17: funcs.logToLinFunc = logToLinRedLog3g10; funcs.colorspaceToXYZFunc = RedWideGamuttoXYZ; break;
        case 18: funcs.logToLinFunc = logToLinSonySLog2; funcs.colorspaceToXYZFunc = SGamut3toXYZ; break;
        case 19: funcs.logToLinFunc = logToLinSonySLog3; funcs.colorspaceToXYZFunc = SGamut3toXYZ; break;
        case 20: funcs.logToLinFunc = logToLinSonySLog3; funcs.colorspaceToXYZFunc = SGamut3CinetoXYZ; break;
        case 21: funcs.logToLinFunc = logToLinSonySLog3; funcs.colorspaceToXYZFunc = SGamut3VenicetoXYZ; break;
        case 22: funcs.logToLinFunc = logToLinSonySLog3; funcs.colorspaceToXYZFunc = SGamut3VeniceCinetoXYZ; break;
    }
    return funcs;
}


// Struct for output conversion functions (XYZ back to RGB)
struct OutputConversionFunctions {
    float3 (*XYZtoColorspaceFunc)(float3 in);
    float3 (*linToLogFunc)(float3 in);
};

// Select appropriate output conversion functions based on source input
__DEVICE__ OutputConversionFunctions selectOutputConversionFunctions(int sourceInput) {
    OutputConversionFunctions funcs;
    switch (sourceInput) {
        case 0: funcs.XYZtoColorspaceFunc = XYZtoACES2065; funcs.linToLogFunc = linear; break;
        case 1: funcs.XYZtoColorspaceFunc = XYZtoACES_CCT; funcs.linToLogFunc = linToLogACEScct; break;
        case 2: funcs.XYZtoColorspaceFunc = XYZtoACES_CG; funcs.linToLogFunc = linToLogACEScc; break;
        case 3: funcs.XYZtoColorspaceFunc = XYZtoAppleLog; funcs.linToLogFunc = linToLogAppleLogProfile; break;
        case 4: funcs.XYZtoColorspaceFunc = XYZtoArriWideGamut3; funcs.linToLogFunc = linToLogArriLogC3; break;
        case 5: funcs.XYZtoColorspaceFunc = XYZtoArriWideGamut4; funcs.linToLogFunc = linToLogArriLogC4; break;
        case 6: funcs.XYZtoColorspaceFunc = XYZtoBlackMagicWideGamutGen5; funcs.linToLogFunc = linToLogBlackmagicFilmGen5; break;
        case 7: funcs.XYZtoColorspaceFunc = XYZtoCanonCinemaGamut; funcs.linToLogFunc = linToLogCanonLog2; break;
        case 8: funcs.XYZtoColorspaceFunc = XYZtoCanonCinemaGamut; funcs.linToLogFunc = linToLogCanonLog3; break;
        case 9: funcs.XYZtoColorspaceFunc = XYZtoDaVinciWideGamut; funcs.linToLogFunc = linToLogDavinciIntermediate; break;
        case 10: funcs.XYZtoColorspaceFunc = XYZtoDJIDGamut; funcs.linToLogFunc = linToLogDJIDLog; break;
        case 11: funcs.XYZtoColorspaceFunc = XYZtoFilmLightEGamut; funcs.linToLogFunc = linToLogFilmLightTLog; break;
        case 12: funcs.XYZtoColorspaceFunc = XYZtoFujiFGamut; funcs.linToLogFunc = linToLogFLog; break;
        case 13: funcs.XYZtoColorspaceFunc = XYZtoFujiFGamut; funcs.linToLogFunc = linToLogFLog2; break;
        case 14: funcs.XYZtoColorspaceFunc = XYZtoGoProProtune; funcs.linToLogFunc = linToLogProtune; break;
        case 15: funcs.XYZtoColorspaceFunc = XYZtoRec2020; funcs.linToLogFunc = linToLogLeicaLog; break;
        case 16: funcs.XYZtoColorspaceFunc = XYZtoPanasonicVGamut; funcs.linToLogFunc = linToLogVLog; break;
        case 17: funcs.XYZtoColorspaceFunc = XYZtoRedWideGamut; funcs.linToLogFunc = linToLogRedLog3g10; break;
        case 18: funcs.XYZtoColorspaceFunc = XYZtoSGamut3; funcs.linToLogFunc = linToLogSonySLog2; break;
        case 19: funcs.XYZtoColorspaceFunc = XYZtoSGamut3; funcs.linToLogFunc = linToLogSonySLog3; break;
        case 20: funcs.XYZtoColorspaceFunc = XYZtoSGamut3Cine; funcs.linToLogFunc = linToLogSonySLog3; break;
        case 21: funcs.XYZtoColorspaceFunc = XYZtoSGamut3Venice; funcs.linToLogFunc = linToLogSonySLog3; break;
        case 22: funcs.XYZtoColorspaceFunc = XYZtoSGamut3VeniceCine; funcs.linToLogFunc = linToLogSonySLog3; break;
    }
    return funcs;
}

//------------------------------------------------------------------------------
// Main Function
//------------------------------------------------------------------------------

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    // Get current pixel values in log space
    float3 inputRGB = make_float3(
        _tex2D(p_TexR, p_X, p_Y),
        _tex2D(p_TexG, p_X, p_Y),
        _tex2D(p_TexB, p_X, p_Y)
    );

    // Get UI parameters
    float inputTemperature = p_InputTemperature;
    float temperature = p_Temperature;
    float tint = p_Tint;
    int blockSize = sample_block_size;  // Using renamed variable
    bool showBox = (p_ShowAvgBox != 0);

    // Select appropriate conversion functions
    // Select input and output conversion functions based on color space
    ConversionFunctions inputConversion = selectConversionFunctions(p_SourceInput);
    OutputConversionFunctions outputConversion = selectOutputConversionFunctions(p_SourceInput);

    // Initialize average linear RGB
    float3 avgLin = make_float3(0.18f, 0.18f, 0.18f);

    // Calculate block-based average if needed
    if (p_Mode == 2 || showBox) {
        float sumLinR = 0.0f, sumLinG = 0.0f, sumLinB = 0.0f;
        float validSamples = 0.0f;

        // Calculate number of blocks
        int blocks_x = p_Width / blockSize;
        int blocks_y = p_Height / blockSize;

        // Sample center of each block
        for (int by = 0; by < blocks_y; by++) {
            int center_y = by * blockSize + blockSize / 2;
            if (center_y >= p_Height) continue;

            for (int bx = 0; bx < blocks_x; bx++) {
                int center_x = bx * blockSize + blockSize / 2;
                if (center_x >= p_Width) continue;

                // Get log values at block center
                float3 blockRGB = make_float3(
                    _tex2D(p_TexR, center_x, center_y),
                    _tex2D(p_TexG, center_x, center_y),
                    _tex2D(p_TexB, center_x, center_y)
                );

                // Exclude near-black/white values
                if (blockRGB.x > 0.01f && blockRGB.x < 0.99f &&
                    blockRGB.y > 0.01f && blockRGB.y < 0.99f &&
                    blockRGB.z > 0.01f && blockRGB.z < 0.99f) {
                    float3 lin = inputConversion.logToLinFunc(blockRGB);
                    sumLinR += lin.x;
                    sumLinG += lin.y;
                    sumLinB += lin.z;
                    validSamples += 1.0f;
                }
            }
        }

        // Calculate average if we have valid samples
        if (validSamples > 0.0f) {
            avgLin = make_float3(
                sumLinR / validSamples,
                sumLinG / validSamples,
                sumLinB / validSamples
            );
        }
    }

    // Convert average to log space
    float3 avgColorLog = outputConversion.linToLogFunc(avgLin);

    // Show average color patch
    if (showBox && p_X < 200 && p_Y < 200) {
        return avgColorLog;
    }

    // Calculate source white point
    float x_source, y_source, dx_dT_source, dy_dT_source;
    temperatureToXYandDerivatives(inputTemperature, &x_source, &y_source, &dx_dT_source, &dy_dT_source);
    applyTintAdjustment(&x_source, &y_source, dx_dT_source, dy_dT_source, tint);

    // Convert source white point to XYZ
    float3 tintedSourceWhiteXYZ = make_float3(
        (1.0f / y_source) * x_source,
        1.0f,
        (1.0f / y_source) * (1.0f - x_source - y_source)
    );

    // Initialize target white point
    float3 targetWhiteXYZ = tintedSourceWhiteXYZ;

    // Calculate target white point based on selected mode
    if (p_Mode == 0) {  // Temperature mode
        float x_tgt, y_tgt, dx_tgt, dy_tgt;
        temperatureToXYandDerivatives(temperature, &x_tgt, &y_tgt, &dx_tgt, &dy_tgt);
        targetWhiteXYZ = make_float3(
            (1.0f / y_tgt) * x_tgt,
            1.0f,
            (1.0f / y_tgt) * (1.0f - x_tgt - y_tgt)
        );
    }
    else if (p_Mode == 1) {  // Custom white balance mode
        float3 pickedLog = make_float3(tgtColor.r, tgtColor.g, tgtColor.b);
        float3 pickedLin = inputConversion.logToLinFunc(pickedLog);
        float3 pickedXYZ = inputConversion.colorspaceToXYZFunc(pickedLin);

        float sum = pickedXYZ.x + pickedXYZ.y + pickedXYZ.z;
        if (sum > 0.0f) {
            float x = pickedXYZ.x / sum;
            float y = pickedXYZ.y / sum;
            targetWhiteXYZ = make_float3(
                (1.0f / y) * x,
                1.0f,
                (1.0f / y) * (1.0f - x - y)
            );
        }
        else {
            // Fallback to D65 if sum is zero
            targetWhiteXYZ = make_float3(0.3127f, 1.0f, 0.3290f);
        }
    }
    else if (p_Mode == 2) {  // Average white balance mode
        float3 avgXYZ = inputConversion.colorspaceToXYZFunc(avgLin);
        float sumAvg = avgXYZ.x + avgXYZ.y + avgXYZ.z;
        if (sumAvg > 0.0f) {
            float x = avgXYZ.x / sumAvg;
            float y = avgXYZ.y / sumAvg;
            targetWhiteXYZ = make_float3(
                (1.0f / y) * x,
                1.0f,
                (1.0f / y) * (1.0f - x - y)
            );
        }
        else {
            // Fallback to D65 if sum is zero
            targetWhiteXYZ = make_float3(0.3127f, 1.0f, 0.3290f);
        }
    }

    // Process current pixel
    float3 linRGB = inputConversion.logToLinFunc(inputRGB);
    float3 XYZ = inputConversion.colorspaceToXYZFunc(linRGB);
    float3 adaptedXYZ = applyCAT02Adaptation(XYZ, targetWhiteXYZ, tintedSourceWhiteXYZ);
    float3 linOut = outputConversion.XYZtoColorspaceFunc(adaptedXYZ);
    float3 finalRGB = outputConversion.linToLogFunc(linOut);

    return finalRGB;
}