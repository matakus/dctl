#line 2

// Meters DCTL v1.05
// Author: Matt.C
// Description: Tool to map exposure into 1 stop bands.
// Maps exposure into discrete one-stop bands using a selected transfer function.

#include "zCCTF.dctl"

//------------------------------------------------------------------------------
// UI PARAMETERS
//------------------------------------------------------------------------------

// Exposure & Guide Controls
DEFINE_UI_PARAMS(p_midGrey, Mid Grey Stops + / -, DCTLUI_SLIDER_FLOAT, 0, -10, 10, 0.01);
DEFINE_UI_TOOLTIP(Mid Grey Stops + / -, "Adjusts midtone exposure in stops (+/-).");

DEFINE_UI_PARAMS(guidePosition, Guide Position, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.01);
DEFINE_UI_TOOLTIP(Guide Position, "Sets the vertical position of the exposure guide (0 = bottom, 1 = top).");

// Source Transfer Function Controls
DEFINE_UI_PARAMS(p_TransferFunctionIn, Source In, DCTLUI_COMBO_BOX, 3, {acesCCIn, acesCCTIn, appleLogIn, arriLogC3In, arriLogC4In, blackmagicFilmGen5In, canonLogIn, canonLog2In, canonLog3In, cineonIn, davinciIntermediateIn, djiDLogIn, filmLightTLogIn, fLogIn, fLog2In, goproProtuneIn, leicaLogIn, nLogIn, vLogIn, redLog3G10In, sonySLogIn, sonySLog2In, sonySLog3In}, {ACEScc, ACEScct, Apple Log, Arri LogC3, Arri LogC4, Blackmagic Film Gen5, Canon Log, Canon Log 2, Canon Log 3, Cineon, DaVinci Intermediate, DJI D-Log, FilmLight T-Log, Fuji F-Log, Fuji F-Log2, GoPro Protune, Leica Log, Nikon N-Log, Panasonic V-Log, Red Log3G10, Sony S-Log, Sony S-Log2, Sony S-Log3});
DEFINE_UI_TOOLTIP(Source In, "Selects the source transfer function for input exposure mapping.");

// Color Mode Controls
DEFINE_UI_PARAMS(colourType, Colors, DCTLUI_COMBO_BOX, 0, {elZone, heatMap}, {EL Zone, Heat Map});
DEFINE_UI_TOOLTIP(Colors, "Selects the color mode for exposure mapping. Default is EL Zone.");

// Guide Visibility Control
DEFINE_UI_PARAMS(showGuide, Show Guide, DCTLUI_CHECK_BOX, 1);
DEFINE_UI_TOOLTIP(Show Guide, "Toggle to display or hide the exposure guide.");


//------------------------------------------------------------------------------
// FUNCTION: getColorsELZone, getColorsHeatMap
// Description: Fills the provided array with 15 color values (float3) representing 
//              exposure stops for the EL Zone mode, ranging from -6 stops (black) to +6 stops (white).
// Parameters:
//   colors - Array of 15 float3 colors to be populated.
//------------------------------------------------------------------------------

__DEVICE__ void getColorsELZone(float3 colors[15])
{
    colors[0]  = make_float3(0.0f, 0.0f, 0.0f);                                  // -6 stops (Black)
    colors[1]  = make_float3(103.0f / 255.0f, 54.0f / 255.0f, 152.0f / 255.0f);  // -5 stops (R103 G54 B152)
    colors[2]  = make_float3(43.0f / 255.0f, 110.0f / 255.0f, 184.0f / 255.0f);  // -4 stops (R43 G110 B184)
    colors[3]  = make_float3(74.0f / 255.0f, 173.0f / 255.0f, 233.0f / 255.0f);  // -3 stops (R74 G173 B233)
    colors[4]  = make_float3(76.0f / 255.0f, 160.0f / 255.0f, 49.0f / 255.0f);   // -2 stops (R76 G160 B49)
    colors[5]  = make_float3(110.0f / 255.0f, 217.0f / 255.0f, 74.0f / 255.0f);  // -1 stops (R110 G217 B74)
    colors[6]  = make_float3(116.0f / 255.0f, 248.0f / 255.0f, 75.0f / 255.0f);  // -0.5 stops (R116 G248 B75)
    colors[7]  = make_float3(128.0f / 255.0f, 128.0f / 255.0f, 128.0f / 255.0f); // 0 stops (R128 G128 B128)
    colors[8]  = make_float3(246.0f / 255.0f, 239.0f / 255.0f, 78.0f / 255.0f);  // +0.5 stops (R246 G239 B78)
    colors[9]  = make_float3(254.0f / 255.0f, 251.0f / 255.0f, 136.0f / 255.0f); // +1 stops (R254 G251 B136)
    colors[10] = make_float3(240.0f / 255.0f, 148.0f / 255.0f, 52.0f / 255.0f);  // +2 stops (R240 G148 B52)
    colors[11] = make_float3(243.0f / 255.0f, 178.0f / 255.0f, 105.0f / 255.0f); // +3 stops (R243 G178 B105)
    colors[12] = make_float3(233.0f / 255.0f, 52.0f / 255.0f, 31.0f / 255.0f);   // +4 stops (R233 G52 B31)
    colors[13] = make_float3(236.0f / 255.0f, 113.0f / 255.0f, 108.0f / 255.0f); // +5 stops (R236 G113 B108)
    colors[14] = make_float3(1.0f, 1.0f, 1.0f);                                  // +6 stops (White)
}

__DEVICE__ void getColorsHeatMap(float3 colors[15])
{
    colors[0]  = make_float3(8.0f / 255.0f, 8.0f / 255.0f, 124.0f / 255.0f);    // -6 stops (R8 G8 B124)
    colors[1]  = make_float3(11.0f / 255.0f, 11.0f / 255.0f, 133.0f / 255.0f);  // -5 stops (R11 G11 B133)
    colors[2]  = make_float3(14.0f / 255.0f, 14.0f / 255.0f, 142.0f / 255.0f);  // -4 stops (R14 G14 B142)
    colors[3]  = make_float3(17.0f / 255.0f, 17.0f / 255.0f, 151.0f / 255.0f);  // -3 stops (R17 G17 B151)
    colors[4]  = make_float3(21.0f / 255.0f, 21.0f / 255.0f, 161.0f / 255.0f);  // -2 stops (R21 G21 B161)
    colors[5]  = make_float3(52.0f / 255.0f, 23.0f / 255.0f, 157.0f / 255.0f);  // -1 stops (R52 G23 B157)
    colors[6]  = make_float3(83.0f / 255.0f, 25.0f / 255.0f, 153.0f / 255.0f);  // -0.5 stops (R83 G25 B153)
    colors[7]  = make_float3(129.0f / 255.0f, 20.0f / 255.0f, 105.0f / 255.0f); // 0 stops (R129 G20 B105)
    colors[8]  = make_float3(175.0f / 255.0f, 15.0f / 255.0f, 57.0f / 255.0f);  // +0.5 stops (R175 G15 B57)
    colors[9]  = make_float3(221.0f / 255.0f, 10.0f / 255.0f, 10.0f / 255.0f);  // +1 stops (R221 G10 B10)
    colors[10] = make_float3(232.0f / 255.0f, 87.0f / 255.0f, 6.0f / 255.0f);   // +2 stops (R232 G87 B6)
    colors[11] = make_float3(243.0f / 255.0f, 164.0f / 255.0f, 3.0f / 255.0f);  // +3 stops (R243 G164 B3)
    colors[12] = make_float3(255.0f / 255.0f, 242.0f / 255.0f, 0.0f / 255.0f);  // +4 stops (R255 G242 B0)
    colors[13] = make_float3(255.0f / 255.0f, 248.0f / 255.0f, 127.0f / 255.0f); // +5 stops (R255 G248 B127)
    colors[14] = make_float3(255.0f / 255.0f, 255.0f / 255.0f, 255.0f / 255.0f); // +6 stops (White)
}

//------------------------------------------------------------------------------
// FUNCTION: calculateExposureBands
// Description: Calculates an array of 15 exposure stops based on the selected
//              mid-grey adjustment and the input transfer function. The stops
//              are calculated as powers of 2 relative to an adjusted middle grey.
// Parameters:
//   stops              - Array of 15 floats to be populated with stop values.
//   p_midGrey          - Slider value to adjust the middle grey exposure.
//   p_TransferFunctionIn - Integer representing the selected transfer function.
//------------------------------------------------------------------------------

__DEVICE__ void calculateExposureBands(float stops[15], float p_midGrey, int p_TransferFunctionIn )
{

float baseMiddleGray = 39.10f / 100.0f;  // Default middle grey constant (39.10% Alexa Mini)

// Mid grey point per camera (IRE %)
if (p_TransferFunctionIn == acesCCIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == acesCCTIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == appleLogIn) { baseMiddleGray = 47.8f / 100.0f; }
if (p_TransferFunctionIn == arriLogC3In) { baseMiddleGray = 39.10f / 100.0f; }
if (p_TransferFunctionIn == arriLogC4In) { baseMiddleGray = 27.8f / 100.0f; }
if (p_TransferFunctionIn == blackmagicFilmGen5In) { baseMiddleGray = 38.4f / 100.0f; }
if (p_TransferFunctionIn == canonLogIn) { baseMiddleGray = 35.0f / 100.0f; }
if (p_TransferFunctionIn == canonLog2In) { baseMiddleGray = 32.0f / 100.0f; }
if (p_TransferFunctionIn == canonLog3In) { baseMiddleGray = 39.10f / 100.0f; }
if (p_TransferFunctionIn == cineonIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == davinciIntermediateIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == djiDLogIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == filmLightTLogIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == fLogIn) { baseMiddleGray = 46.3f / 100.0f; }
if (p_TransferFunctionIn == fLog2In) { baseMiddleGray = 38.4f / 100.0f; }
if (p_TransferFunctionIn == goproProtuneIn) { baseMiddleGray = 68.0f / 100.0f; }
if (p_TransferFunctionIn == leicaLogIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == nLogIn) { baseMiddleGray = 18.0f / 100.0f; }
if (p_TransferFunctionIn == redLog3G10In) { baseMiddleGray = 46.1f / 100.0f; }
if (p_TransferFunctionIn == sonySLogIn) { baseMiddleGray = 37.6f / 100.0f; }
if (p_TransferFunctionIn == sonySLog2In) { baseMiddleGray = 32.3f / 100.0f; }
if (p_TransferFunctionIn == sonySLog3In) { baseMiddleGray = 41.1f / 100.0f; }
if (p_TransferFunctionIn == vLogIn) { baseMiddleGray = 42.3f / 100.0f; }


    // Adjust the middle grey value based on the p_midGrey slider
    float adjustedMiddleGray = baseMiddleGray * _exp2f(p_midGrey);

    stops[0] = adjustedMiddleGray / _exp2f(6.0f);  // -6 stops
    stops[1] = adjustedMiddleGray / _exp2f(5.0f);  // -5 stops
    stops[2] = adjustedMiddleGray / _exp2f(4.0f);  // -4 stops
    stops[3] = adjustedMiddleGray / _exp2f(3.0f);  // -3 stops
    stops[4] = adjustedMiddleGray / _exp2f(2.0f);  // -2 stops
    stops[5] = adjustedMiddleGray / _exp2f(1.0f);  // -1 stops
    stops[6] = adjustedMiddleGray / _exp2f(0.5f);  // -0.5 stops
    stops[7] = adjustedMiddleGray;                 // 0 stops
    stops[8] = adjustedMiddleGray * _exp2f(0.5f);  // +0.5 stops
    stops[9] = adjustedMiddleGray * _exp2f(1.0f);  // +1 stop
    stops[10] = adjustedMiddleGray * _exp2f(2.0f); // +2 stops
    stops[11] = adjustedMiddleGray * _exp2f(3.0f); // +3 stops
    stops[12] = adjustedMiddleGray * _exp2f(4.0f); // +4 stops
    stops[13] = adjustedMiddleGray * _exp2f(5.0f); // +5 stops
    stops[14] = adjustedMiddleGray * _exp2f(6.0f); // +6 stops
}

//------------------------------------------------------------------------------
// FUNCTION: getColorForExposure
// Description: Determines the appropriate color for a given luminance value by comparing it 
//              to the calculated exposure stops and returning the corresponding color from the colors array.
// Parameters:
//   luminance - The calculated luminance of the current pixel.
//   stops     - Array of 15 exposure stop values.
//   colors    - Array of 15 float3 color values corresponding to the stops.
// Returns:
//   A float3 color corresponding to the exposure band that contains the luminance.
//------------------------------------------------------------------------------

__DEVICE__ float3 getColorForExposure(float luminance, float stops[15], float3 colors[15])
{
    for (int i = 0; i < 14; ++i)
    {
        if (luminance >= stops[i] && luminance < stops[i + 1])
        {
            return colors[i];
        }
    }

    // If the luminance value is above the highest stop, apply the highest color
    if (luminance >= stops[14])
    {
        return colors[14];
    }

    // If the luminance value is below the lowest stop, apply the lowest color
    return colors[0];
}

//------------------------------------------------------------------------------
// FUNCTION: showHelper
// Description: Displays an exposure guide overlay on the image. The guide consists of several regions:
//              - A black line region,
//              - A color bar region displaying the exposure colors,
//              - A number region with overlaid text for the exposure stops.
// Parameters:
//   p_Width, p_Height - Full image dimensions.
//   p_X, p_Y        - Current pixel coordinates.
//   colors          - Array of 15 color values used for the guide.
//   guidePosition   - Slider value indicating vertical guide position (0 = bottom, 1 = top).
// Returns:
//   A float3 color if the current pixel is within the guide area; otherwise, returns a negative value vector.
//   The guide pixel maps to create the numbers
//------------------------------------------------------------------------------

__DEVICE__ float3 showHelper(int p_Width, int p_Height, int p_X, int p_Y, float3 colors[15], float guidePosition)
{
    // Calculate the threshold for each 2.5% row of pixels
    int threshold = p_Height * 0.025;
    int boxWidth = p_Width / 15;

    // Calculate guide position based on slider (0=bottom, 1=top)
    int guideY = (int)(p_Height - (p_Height * guidePosition));

    // Ensure the guide stays fully visible
    guideY = _fmaxf(2 * threshold, _fminf(guideY, p_Height - 2 * threshold));
    
    float3 bgColour = make_float3(0.25f, 0.25f, 0.25f); // Dark grey color
    float3 bgColour2 = make_float3(0.35f, 0.35f, 0.35f); // Grey color

    // Define the regions
    int blackLineY = guideY;
    int colorBarY = guideY + 2;
    int numberY = guideY + threshold;
    
    // Check if pixel is in black line region (2px)
    if (p_Y == blackLineY || p_Y == blackLineY + 1) {
        return make_float3(0.1f, 0.1f, 0.1f);
    }
    
    // Check if pixel is in color bar region
    if (p_Y >= colorBarY && p_Y < numberY) {
        int colorIndex = (p_X / boxWidth) % 15;
        return colors[colorIndex];
    }
    
    // Check if pixel is in number region
    if (p_Y >= numberY && p_Y < numberY + threshold) 
    {
        int scale = threshold / 10;
        int textHeight = 5 * scale;
        int startY = numberY + (threshold - textHeight) / 2;

        // First box (-6)
        {
            int blackBoxStartX = 0;
            int blackBoxEndX = boxWidth;

            if (p_X >= blackBoxStartX && p_X < blackBoxEndX)
            {
                int pixelMapMinus6[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = blackBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus6[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Second box (-5)
        {
            int purpleBoxStartX = boxWidth;
            int purpleBoxEndX = purpleBoxStartX + boxWidth;

            if (p_X >= purpleBoxStartX && p_X < purpleBoxEndX)
            {
                int pixelMapMinus5[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = purpleBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus5[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Third box (-4)
        {
            int blueBoxStartX = boxWidth * 2;
            int blueBoxEndX = blueBoxStartX + boxWidth;

            if (p_X >= blueBoxStartX && p_X < blueBoxEndX)
            {
                int pixelMapMinus4[5][7] = {
                    {0, 0, 0, 0, 1, 0, 1},
                    {0, 0, 0, 0, 1, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 0, 0, 1}
                };

                int textWidth = 7 * scale;
                int startX = blueBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus4[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Fourth box (-3)
        {
            int cyanBoxStartX = boxWidth * 3;
            int cyanBoxEndX = cyanBoxStartX + boxWidth;

            if (p_X >= cyanBoxStartX && p_X < cyanBoxEndX)
            {
                int pixelMapMinus3[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = cyanBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus3[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Fifth box (-2)
        {
            int greenBoxStartX = boxWidth * 4;
            int greenBoxEndX = greenBoxStartX + boxWidth;

            if (p_X >= greenBoxStartX && p_X < greenBoxEndX)
            {
                int pixelMapMinus2[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 0, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 0},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = greenBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus2[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Sixth box (-1)
        {
            int limeBoxStartX = boxWidth * 5;
            int limeBoxEndX = limeBoxStartX + boxWidth;

            if (p_X >= limeBoxStartX && p_X < limeBoxEndX)
            {
                int pixelMapMinus1[5][7] = {
                    {0, 0, 0, 0, 0, 1, 0},
                    {0, 0, 0, 0, 1, 1, 0},
                    {1, 1, 1, 0, 0, 1, 0},
                    {0, 0, 0, 0, 0, 1, 0},
                    {0, 0, 0, 0, 0, 1, 0}
                };

                int textWidth = 7 * scale;
                int startX = limeBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapMinus1[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Seventh box (-0.5)
        {
            int brightGreenBoxStartX = boxWidth * 6;
            int brightGreenBoxEndX = brightGreenBoxStartX + boxWidth;

            if (p_X >= brightGreenBoxStartX && p_X < brightGreenBoxEndX)
            {
                int pixelMapMinus05[5][13] = {
                    {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1},
                    {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1}
                };

                int textWidth = 13 * scale;
                int startX = brightGreenBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 13 * scale; ++x)
                    {
                        if (pixelMapMinus05[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Eighth box (0)
        {
            int greyBoxStartX = boxWidth * 7;
            int greyBoxEndX = greyBoxStartX + boxWidth;

            if (p_X >= greyBoxStartX && p_X < greyBoxEndX)
            {
                int pixelMapZero[5][7] = {
                    {0, 0, 1, 1, 1, 0, 0},
                    {0, 0, 1, 0, 1, 0, 0},
                    {0, 0, 1, 0, 1, 0, 0},
                    {0, 0, 1, 0, 1, 0, 0},
                    {0, 0, 1, 1, 1, 0, 0}
                };

                int textWidth = 7 * scale;
                int startX = greyBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapZero[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Ninth box (+0.5)
        {
            int yellowBoxStartX = boxWidth * 8;
            int yellowBoxEndX = yellowBoxStartX + boxWidth;

            if (p_X >= yellowBoxStartX && p_X < yellowBoxEndX)
            {
                int pixelMapPlus05[5][13] = {
                    {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1}
                };

                int textWidth = 13 * scale;
                int startX = yellowBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 13 * scale; ++x)
                    {
                        if (pixelMapPlus05[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Tenth box (+1)
        {
            int lightYellowBoxStartX = boxWidth * 9;
            int lightYellowBoxEndX = lightYellowBoxStartX + boxWidth;

            if (p_X >= lightYellowBoxStartX && p_X < lightYellowBoxEndX)
            {
                int pixelMapPlus1[5][7] = {
                    {0, 0, 0, 0, 0, 1, 0},
                    {0, 1, 0, 0, 1, 1, 0},
                    {1, 1, 1, 0, 0, 1, 0},
                    {0, 1, 0, 0, 0, 1, 0},
                    {0, 0, 0, 0, 0, 1, 0}
                };

                int textWidth = 7 * scale;
                int startX = lightYellowBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus1[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Eleventh box (+2)
        {
            int orangeBoxStartX = boxWidth * 10;
            int orangeBoxEndX = orangeBoxStartX + boxWidth;

            if (p_X >= orangeBoxStartX && p_X < orangeBoxEndX)
            {
                int pixelMapPlus2[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 0, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 0},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = orangeBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus2[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Twelfth box (+3)
        {
            int lightOrangeBoxStartX = boxWidth * 11;
            int lightOrangeBoxEndX = lightOrangeBoxStartX + boxWidth;

            if (p_X >= lightOrangeBoxStartX && p_X < lightOrangeBoxEndX)
            {
                int pixelMapPlus3[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 0, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 1, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = lightOrangeBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus3[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Thirteenth box (+4)
        {
            int redBoxStartX = boxWidth * 12;
            int redBoxEndX = redBoxStartX + boxWidth;

            if (p_X >= redBoxStartX && p_X < redBoxEndX)
            {
                int pixelMapPlus4[5][7] = {
                    {0, 0, 0, 0, 1, 0, 1},
                    {0, 1, 0, 0, 1, 0, 1},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 1, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 0, 0, 1}
                };

                int textWidth = 7 * scale;
                int startX = redBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus4[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour;
            }
        }

        // Fourteenth box (+5)
        {
            int lightRedBoxStartX = boxWidth * 13;
            int lightRedBoxEndX = lightRedBoxStartX + boxWidth;

            if (p_X >= lightRedBoxStartX && p_X < lightRedBoxEndX)
            {
                int pixelMapPlus5[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 1, 0, 0, 0, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = lightRedBoxStartX + (boxWidth - textWidth) / 2;

                bool isWhitePixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus5[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isWhitePixel = true;
                                break;
                            }
                        }
                    }
                    if (isWhitePixel) break;
                }

                return isWhitePixel ? make_float3(1, 1, 1) : bgColour2;
            }
        }

        // Fifteenth box (+6)
        {
            int whiteBoxStartX = boxWidth * 14;
            int whiteBoxEndX = whiteBoxStartX + boxWidth;

            if (p_X >= whiteBoxStartX && p_X < whiteBoxEndX)
            {
                int pixelMapPlus6[5][7] = {
                    {0, 0, 0, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 0},
                    {1, 1, 1, 0, 1, 1, 1},
                    {0, 1, 0, 0, 1, 0, 1},
                    {0, 0, 0, 0, 1, 1, 1}
                };

                int textWidth = 7 * scale;
                int startX = whiteBoxStartX + (boxWidth - textWidth) / 2;

                bool isBlackPixel = false;
                for (int y = 0; y < 5 * scale; ++y)
                {
                    for (int x = 0; x < 7 * scale; ++x)
                    {
                        if (pixelMapPlus6[y / scale][x / scale] == 1)
                        {
                            if (p_X == startX + x && p_Y == startY + y)
                            {
                                isBlackPixel = true;
                                break;
                            }
                        }
                    }
                    if (isBlackPixel) break;
                }

                return isBlackPixel ? make_float3(1, 1, 1) : bgColour;
            }
        }
    }

    return make_float3(-1.0f, -1.0f, -1.0f);
}

//------------------------------------------------------------------------------
// FUNCTION: convertToLinear
// Description: Converts an input color from its encoded (log) space to linear space based on the selected transfer function.
// Parameters:
//   in          - Input color (float3) in encoded space.
//   transferFunc - Integer representing the selected transfer function.
// Returns:
//   The linearized color (float3).
//------------------------------------------------------------------------------

__DEVICE__ float3 convertToLinear(float3 in, int transferFunc) {
if (transferFunc == acesCCIn) return logToLinACEScc(in);
if (transferFunc == acesCCTIn) return logToLinACEScct(in);
if (transferFunc == appleLogIn) return logToLinAppleLogProfile(in);
if (transferFunc == arriLogC3In) return logToLinArriLogC3(in);
if (transferFunc == arriLogC4In) return logToLinArriLogC4(in);
if (transferFunc == blackmagicFilmGen5In) return logToLinBlackmagicFilmGen5(in);
if (transferFunc == canonLogIn) return logToLinCanonLog(in);
if (transferFunc == canonLog2In) return logToLinCanonLog2(in);
if (transferFunc == canonLog3In) return logToLinCanonLog3(in);
if (transferFunc == cineonIn) return logToLinCineon(in);
if (transferFunc == davinciIntermediateIn) return logToLinDavinciIntermediate(in);
if (transferFunc == djiDLogIn) return logToLinDJIDLog(in);
if (transferFunc == filmLightTLogIn) return logToLinFilmLightTLog(in);
if (transferFunc == fLogIn) return logToLinFLog(in);
if (transferFunc == fLog2In) return logToLinFLog2(in);
if (transferFunc == goproProtuneIn) return logToLinProtune(in);
if (transferFunc == leicaLogIn) return logToLinLeicaLog(in);
if (transferFunc == nLogIn) return logToLinNLog(in);
if (transferFunc == redLog3G10In) return logToLinRedLog3g10(in);
if (transferFunc == sonySLogIn) return logToLinSonySLog(in);
if (transferFunc == sonySLog2In) return logToLinSonySLog2(in);
if (transferFunc == sonySLog3In) return logToLinSonySLog3(in);
if (transferFunc == vLogIn) return logToLinVLog(in);
}

//------------------------------------------------------------------------------
// Main Function
//------------------------------------------------------------------------------
// Description: Main image transformation function. It performs the following steps:
//              1. Converts the input color from encoded space to linear space.
//              2. Retrieves the appropriate color palette based on the selected color mode.
//              3. If the guide is enabled, applies the guide overlay.
//              4. Calculates the pixel luminance.
//              5. Calculates exposure bands based on the mid-grey adjustment.
//              6. Determines the color for the current pixel based on its luminance and exposure bands.
// Parameters:
//   p_Width, p_Height - Full image dimensions.
//   p_X, p_Y        - Pixel coordinates in full image space.
//   p_R, p_G, p_B   - Input pixel color components.
// Returns:
//   The final output color (float3) for the pixel after exposure mapping and guide overlay.
//------------------------------------------------------------------------------

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 out = make_float3(p_R, p_G, p_B);

    // Convert to linear
    float3 linColor = convertToLinear(out, p_TransferFunctionIn);

    // Get the selected colors array
    float3 colors[15];
    if ((int)colourType == 0) {
        getColorsELZone(colors);
    } else {
        getColorsHeatMap(colors);
    }

    // Apply Guide
    if (showGuide == 1){
        float3 bottomColor = showHelper(p_Width, p_Height, p_X, p_Y, colors, guidePosition);
        if (bottomColor.x >= 0) {
            return bottomColor;
        }
    }

    // Calculate luminance
    float luminance = (0.2126f * linColor.x) + (0.7152f * linColor.y) + (0.0722f * linColor.z);

    // Calculate exposure bands
    float stops[15];
    calculateExposureBands(stops, p_midGrey, p_TransferFunctionIn);

    // Determine the color for the current pixel based on its luminance
    float3 result = getColorForExposure(luminance, stops, colors);

    return result;
}
