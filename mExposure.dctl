#line 2 // Debugging line

// Exposure DCTL // // 1.04 // Matt.C
// Adjsuts the Exposure of an image with masks.

#include "zCCTF.dctl"

// UI Parameters
DEFINE_UI_PARAMS(p_Exp, Exposure, DCTLUI_SLIDER_FLOAT, 0, -7, 7, 0.001)               // Default is 7 Stops
DEFINE_UI_PARAMS(p_ExpHigh, Highlight + / -, DCTLUI_SLIDER_FLOAT, 0, -5, 5, 0.1)     // Default is 5 Stops
DEFINE_UI_PARAMS(p_ExpShad, Shadow + / -, DCTLUI_SLIDER_FLOAT, 0, -5, 5, 0.1)        // Default is 5 Stops
DEFINE_UI_PARAMS(maskStrenHigh, High Mask Strength, DCTLUI_SLIDER_FLOAT, 0.333, 0, 1, 0.01) // Default is 0.333
DEFINE_UI_PARAMS(maskStrenShad, Shad Mask Strength, DCTLUI_SLIDER_FLOAT, 0.333, 0, 1, 0.01) // Default is 0.333
DEFINE_UI_PARAMS(HighlightSaturation, Highlight Saturation, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01) // Highlight Saturation slider
DEFINE_UI_PARAMS(ShadowSaturation, Shadow Saturation, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01) // Shadow Saturation slider
DEFINE_UI_PARAMS(chanTypeH, Highlight Mask, DCTLUI_COMBO_BOX, 0, {GREY_h, RED_h, GREEN_h, BLUE_h}, {Luma, Red Channel, Green Channel, Blue Channel}) // Default is Luma
DEFINE_UI_PARAMS(chanTypeS, Shadow Mask, DCTLUI_COMBO_BOX, 0, {GREY_s, RED_s, GREEN_s, BLUE_s}, {Luma, Red Channel, Green Channel, Blue Channel}) // Default is Luma
DEFINE_UI_PARAMS(showMask, View Mask, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(toggleMask, On: High | Off: Shad, DCTLUI_CHECK_BOX, 1)
// Default is DaVinci Intermediate
DEFINE_UI_PARAMS(p_TransferFunction, Transfer Function, DCTLUI_COMBO_BOX, 10, {aces_cc, aces_cct, appleLog, arriLogC3, arriLogC4, blackmagicFilmGen5, canonlog, canonlog2, canonlog3, cineon, davinciIntermediate, djiDlog, filmlightTlog, flog, flog2, goProProtune, leicaLog, lin, nikonNlog, panasonicVlog, redlog3g10, sonySlog, sonySlog2, sonySlog3}, {ACEScc, ACEScct, Apple Log, Arri LogC3, Arri LogC4, Blackmagic Film Gen 5, Canon Log, Canon Log 2, Canon Log 3, Cineon Film Log, DaVinci Intermediate, DJI D-Log, Filmlight T-Log, FujiFilm F-Log, FujiFilm F-Log2, GoPro Protune, Leica L-Log, Linear, Nikon N-Log, Panasonic V-Log, Red Log3G10, Sony S-Log, Sony S-Log2, Sony S-Log3})

// Helper Functions

// Ensure powf behaves consistently across different operating systems
__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

__DEVICE__ float3 exposureFunc(float3 in, float stops) {
    return in * _powf(2.0f, stops);
}

__DEVICE__ float luminance(float r, float g, float b) {
    return 0.2126f * r + 0.7152f * g + 0.0722f * b;
}

__DEVICE__ float maskFunc(float r, float g, float b, int chanType, float stren, bool invert) {
    float adjustedStren = stren * 6.0f;
    adjustedStren = adjustedStren > 1.0f ? _powf(2.0f, adjustedStren - 1.0f) : adjustedStren;
    float lum = invert ? _powf(1.0f - luminance(r, g, b), adjustedStren) : _powf(luminance(r, g, b), adjustedStren);
    float mask = chanType == 0 ? lum : chanType == 1 ? _powf(invert ? 1.0f - r : r, adjustedStren) : chanType == 2 ? _powf(invert ? 1.0f - g : g, adjustedStren) : _powf(invert ? 1.0f - b : b, adjustedStren);
    return _saturatef(mask);
}

__DEVICE__ float3 convertToLinear(float3 in, int transferFunc) {
    switch (transferFunc) {
        case aces_cc:             return logToLinACEScc(in);
        case aces_cct:            return logToLinACEScct(in);
        case appleLog:            return logToLinAppleLogProfile(in);
        case arriLogC3:           return logToLinArriLogC3(in);
        case arriLogC4:           return logToLinArriLogC4(in);
        case blackmagicFilmGen5:  return logToLinBlackmagicFilmGen5(in);
        case canonlog:            return logToLinCanonLog(in);
        case canonlog2:           return logToLinCanonLog2(in);
        case canonlog3:           return logToLinCanonLog3(in);
        case cineon:              return logToLinCineon(in);
        case davinciIntermediate: return logToLinDavinciIntermediate(in);
        case djiDlog:             return logToLinDJIDLog(in);
        case filmlightTlog:       return logToLinFilmLightTLog(in);
        case flog:                return logToLinFLog(in);
        case flog2:               return logToLinFLog2(in);
        case goProProtune:        return logToLinProtune(in);
        case leicaLog:            return logToLinLeicaLog(in);
        case lin:                 return in; // Linear input, no conversion
        case nikonNlog:           return logToLinNLog(in);
        case panasonicVlog:       return logToLinVLog(in);
        case redlog3g10:          return logToLinRedLog3g10(in);
        case sonySlog:            return logToLinSonySLog(in);
        case sonySlog2:           return logToLinSonySLog2(in);
        case sonySlog3:           return logToLinSonySLog3(in);
    }
}

__DEVICE__ float3 convertToLog(float3 in, int transferFunc) {
    switch (transferFunc) {
        case aces_cc:             return linToLogACEScc(in);
        case aces_cct:            return linToLogACEScct(in);
        case appleLog:            return linToLogAppleLogProfile(in);
        case arriLogC3:           return linToLogArriLogC3(in);
        case arriLogC4:           return linToLogArriLogC4(in);
        case blackmagicFilmGen5:  return linToLogBlackmagicFilmGen5(in);
        case canonlog:            return linToLogCanonLog(in);
        case canonlog2:           return linToLogCanonLog2(in);
        case canonlog3:           return linToLogCanonLog3(in);
        case cineon:              return linToLogCineon(in);
        case davinciIntermediate: return linToLogDavinciIntermediate(in);
        case djiDlog:             return linToLogDJIDLog(in);
        case filmlightTlog:       return linToLogFilmLightTLog(in);
        case flog:                return linToLogFLog(in);
        case flog2:               return linToLogFLog2(in);
        case goProProtune:        return linToLogProtune(in);
        case leicaLog:            return linToLogLeicaLog(in);
        case lin:                 return in; // Linear input, no conversion
        case nikonNlog:           return linToLogNLog(in);
        case panasonicVlog:       return linToLogVLog(in);
        case redlog3g10:          return linToLogRedLog3g10(in);
        case sonySlog:            return linToLogSonySLog(in);
        case sonySlog2:           return linToLogSonySLog2(in);
        case sonySlog3:           return linToLogSonySLog3(in);
    }
}

// Adjust saturation function
__DEVICE__ float3 adjustSaturation(float3 rgb, float sat) {
    sat -= 1.0f; // Offset saturation slider for adjustment

    // Get the maximum channel value (achromatic color)
    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));                                  
    float3 distance = ach == 0.0f ? make_float3(0.0f, 0.0f, 0.0f) : (ach - rgb) / _fabs(ach);
    distance *= (1.0f + sat);

    // Compute new RGB values based on saturation adjustment
    float3 newRGB = ach - distance * _fabs(ach);

    return newRGB;
}

// Transform image
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 in = make_float3(p_R, p_G, p_B);

    // Convert to linear
    float3 lin = convertToLinear(in, p_TransferFunction);

    // Apply global exposure
    float3 globalExp = exposureFunc(lin, p_Exp);
    float3 logGlobalExp = convertToLog(globalExp, p_TransferFunction);

    // Adjust highlight exposure
    float3 expHigh = exposureFunc(globalExp, p_ExpHigh);
    
    // Convert to log space after adjusting highlight exposure
    float3 logHigh = convertToLog(expHigh, p_TransferFunction);

    // Apply saturation adjustment using the Highlight Saturation slider
    float3 satHigh = adjustSaturation(logHigh, HighlightSaturation);  // Use the slider value
    
    // Apply highlight mask
    float maskH = maskFunc(in.x, in.y, in.z, chanTypeH, maskStrenHigh, false);
    float3 maskedHigh = satHigh * maskH + logGlobalExp * (1.0f - maskH);

    // Adjust shadow exposure
    float3 expShad = exposureFunc(globalExp, p_ExpShad);
    float3 logShad = convertToLog(expShad, p_TransferFunction);

    // Apply saturation adjustment using the Shadow Saturation slider
    float3 satShad = adjustSaturation(logShad, ShadowSaturation);  // Use the slider value
    
    // Apply shadow mask
    float maskS = maskFunc(in.x, in.y, in.z, chanTypeS, maskStrenShad, true);
    float3 maskedShad = satShad * maskS + maskedHigh * (1.0f - maskS);

    // Optionally show the mask if enabled
    if (showMask) {
        return toggleMask ? make_float3(maskH, maskH, maskH) : make_float3(maskS, maskS, maskS);
    }

    // Return the final result
    return maskedShad;
}

