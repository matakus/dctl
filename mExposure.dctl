#line 2 //Debugging line

// Exposure DCTL 1.03 //m.c
// Adjusts the exposure of an image in stops, with the ability to mask it to the highlights and shadows
// You can also have control over the saturation

//
#include "zCCTF.dctl"

// UI Parameters
DEFINE_UI_PARAMS(p_Exp, Exposure, DCTLUI_SLIDER_FLOAT, 0, -7, 7, 0.001) //Default is 7 Stops
DEFINE_UI_PARAMS(p_ExpHigh, Highlight + / -, DCTLUI_SLIDER_FLOAT, 0, -5, 5, 0.1) //Default is 5 Stops
DEFINE_UI_PARAMS(p_ExpShad, Shadow + / -, DCTLUI_SLIDER_FLOAT, 0, -5, 5, 0.1) //Default is 5 Stops
DEFINE_UI_PARAMS(maskStrenHigh, High Mask Strength, DCTLUI_SLIDER_FLOAT, 0.333, 0, 1, 0.01) //Default is 0.333
DEFINE_UI_PARAMS(maskStrenShad, Shad Mask Strength, DCTLUI_SLIDER_FLOAT, 0.333, 0, 1, 0.01) //Default is 0.333
DEFINE_UI_PARAMS(HighlightSaturation, Highlight Saturation, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.01) 
DEFINE_UI_PARAMS(ShadowSaturation, Shadow Saturation, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.01)
DEFINE_UI_PARAMS(chanTypeH, Highlight Mask, DCTLUI_COMBO_BOX, 0, {GREY_h, RED_h, GREEN_h, BLUE_h}, {Luma, Red Channel, Green Channel, Blue Channel}) //Default is Luma
DEFINE_UI_PARAMS(chanTypeS, Shadow Mask, DCTLUI_COMBO_BOX, 0, {GREY_s, RED_s, GREEN_s, BLUE_s}, {Luma, Red Channel, Green Channel, Blue Channel}) //Default is Luma
DEFINE_UI_PARAMS(showMask, View Mask, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(toggleMask, On: High | Off: Shad, DCTLUI_CHECK_BOX, 1)
// Default is davinci intermediate but you can change to whatever you want
DEFINE_UI_PARAMS(p_TransferFunction, Transfer Function, DCTLUI_COMBO_BOX, 10, {aces_cc, aces_cct, appleLog, arriLogC3, arriLogC4, blackmagicFilmGen5, canonlog, canonlog2, canonlog3, cineon, davinciIntermediate, djiDlog, filmlightTlog, flog, flog2, goProProtune, leicaLog, lin, nikonNlog, panasonicVlog, redlog3g10, sonySlog, sonySlog2, sonySlog3}, {ACEScc, ACEScct, Apple Log, Arri LogC3, Arri LogC4, Blackmagic Film Gen 5, Canon Log, Canon Log 2, Canon Log 3, Cineon Film Log, DaVinci Intermediate, DJI D-Log, Filmlight T-Log, FujiFilm F-Log, FujiFilm F-Log2, GoPro Protune, Leica L-Log, Linear, Nikon N-Log, Panasonic V-Log, Red Log3G10, Sony S-Log, Sony S-Log2, Sony S-Log3})

//Transfer Functions
//Converts input from log to linear and linear to log


// Helper Functions
__DEVICE__ float3 exposureFunc(float3 in, float stops) {
    return in * _powf(2.0f, stops);
}

__DEVICE__ float luminance(float r, float g, float b) {
    return 0.2126f * r + 0.7152f * g + 0.0722f * b;
}

__DEVICE__ float maskFunc(float r, float g, float b, int chanType, float stren, bool invert) {
    float adjustedStren = stren * 6.0f;
    adjustedStren = adjustedStren > 1.0f ? _powf(2.0f, adjustedStren - 1.0f) : adjustedStren;
    float lum = invert ? _powf(1.0f - luminance(r, g, b), adjustedStren) : _powf(luminance(r, g, b), adjustedStren);
    float mask = chanType == 0 ? lum : chanType == 1 ? _powf(invert ? 1.0f - r : r, adjustedStren) : chanType == 2 ? _powf(invert ? 1.0f - g : g, adjustedStren) : _powf(invert ? 1.0f - b : b, adjustedStren);
    return _saturatef(mask);
}

__DEVICE__ float3 adjustSaturation(float3 rgb, float sat) {
    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float minColor = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    float currentSat = ach == 0.0f ? 0.0f : (ach - minColor) / ach;
    float adjSatEffect = sat > 0 ? 1.0f + (1.0f - currentSat) * sat : 1.0f + currentSat * sat;
    float3 dist = ach == 0.0f ? 0.0f : (ach - rgb) / _fabs(ach);
    dist *= adjSatEffect;
    float3 result = ach - dist * _fabs(ach);
    
    // Clamp the result to ensure no negative values
    result.x = _fmaxf(result.x, 0.0f);
    result.y = _fmaxf(result.y, 0.0f);
    result.z = _fmaxf(result.z, 0.0f);
    
    return result;
}


__DEVICE__ float3 convertToLinear(float3 in, int transferFunc) {
    if (transferFunc == aces_cc) return logToLinACEScc(in);
    if (transferFunc == aces_cct) return logToLinACEScct(in);
    if (transferFunc == appleLog) return logToLinAppleLogProfile(in);
    if (transferFunc == arriLogC3) return logToLinArriLogC3(in);
    if (transferFunc == arriLogC4) return logToLinArriLogC4(in);
    if (transferFunc == blackmagicFilmGen5) return logToLinBlackmagicFilmGen5(in);
    if (transferFunc == canonlog) return logToLinCanonLog(in);
    if (transferFunc == canonlog2) return logToLinCanonLog2(in);
    if (transferFunc == canonlog3) return logToLinCanonLog3(in);
    if (transferFunc == cineon) return logToLinCineon(in);
    if (transferFunc == davinciIntermediate) return logToLinDavinciIntermediate(in);
    if (transferFunc == djiDlog) return logToLinDJIDLog(in);
    if (transferFunc == filmlightTlog) return logToLinFilmLightTLog(in);
    if (transferFunc == flog) return logToLinFLog(in);
    if (transferFunc == flog2) return logToLinFLog2(in);
    if (transferFunc == goProProtune) return logToLinProtune(in);
    if (transferFunc == leicaLog) return logToLinLeicaLog(in);
    if (transferFunc == lin) return in;
    if (transferFunc == nikonNlog) return logToLinNLog(in);
    if (transferFunc == panasonicVlog) return logToLinVLog(in);
    if (transferFunc == redlog3g10) return logToLinRedLog3g10(in);
    if (transferFunc == sonySlog) return logToLinSonySLog(in);
    if (transferFunc == sonySlog2) return logToLinSonySLog2(in);
    if (transferFunc == sonySlog3) return logToLinSonySLog3(in);
    return in; // Default case, return input as-is
}

__DEVICE__ float3 convertToLog(float3 in, int transferFunc) {
    if (transferFunc == aces_cc) return linToLogACEScc(in);
    if (transferFunc == aces_cct) return linToLogACEScct(in);
    if (transferFunc == appleLog) return linToLogAppleLogProfile(in);
    if (transferFunc == arriLogC3) return linToLogArriLogC3(in);
    if (transferFunc == arriLogC4) return linToLogArriLogC4(in);
    if (transferFunc == blackmagicFilmGen5) return linToLogBlackmagicFilmGen5(in);
    if (transferFunc == canonlog) return linToLogCanonLog(in);
    if (transferFunc == canonlog2) return linToLogCanonLog2(in);
    if (transferFunc == canonlog3) return linToLogCanonLog3(in);
    if (transferFunc == cineon) return linToLogCineon(in);
    if (transferFunc == davinciIntermediate) return linToLogDavinciIntermediate(in);
    if (transferFunc == djiDlog) return linToLogDJIDLog(in);
    if (transferFunc == filmlightTlog) return linToLogFilmLightTLog(in);
    if (transferFunc == flog) return linToLogFLog(in);
    if (transferFunc == flog2) return linToLogFLog2(in);
    if (transferFunc == goProProtune) return linToLogProtune(in);
    if (transferFunc == leicaLog) return linToLogLeicaLog(in);
    if (transferFunc == lin) return in;
    if (transferFunc == nikonNlog) return linToLogNLog(in);
    if (transferFunc == panasonicVlog) return linToLogVLog(in);
    if (transferFunc == redlog3g10) return linToLogRedLog3g10(in);
    if (transferFunc == sonySlog) return linToLogSonySLog(in);
    if (transferFunc == sonySlog2) return linToLogSonySLog2(in);
    if (transferFunc == sonySlog3) return linToLogSonySLog3(in);
    return in; // Default case, return input as-is
}

// Transform image
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 in = make_float3(p_R, p_G, p_B);

    // Convert to linear
    float3 lin = convertToLinear(in, p_TransferFunction);

    // Apply global exposure
    float3 globalExp = exposureFunc(lin, p_Exp);
    float3 logGlobalExp = convertToLog(globalExp, p_TransferFunction);

    // Adjust highlight exposure
    float3 expHigh = exposureFunc(globalExp, p_ExpHigh);
    float3 satHigh = adjustSaturation(expHigh, HighlightSaturation);
    float3 logHigh = convertToLog(satHigh, p_TransferFunction);
    float maskH = maskFunc(in.x, in.y, in.z, chanTypeH, maskStrenHigh, false);
    float3 maskedHigh = logHigh * maskH + logGlobalExp * (1.0f - maskH);

    // Adjust shadow exposure
    float3 expShad = exposureFunc(globalExp, p_ExpShad);
    float3 satShad = adjustSaturation(expShad, ShadowSaturation);
    float3 logShad = convertToLog(satShad, p_TransferFunction);
    float maskS = maskFunc(in.x, in.y, in.z, chanTypeS, maskStrenShad, true);
    float3 maskedShad = logShad * maskS + maskedHigh * (1.0f - maskS);

    if (showMask) {
        return toggleMask ? make_float3(maskH, maskH, maskH) : make_float3(maskS, maskS, maskS);
    }

    // Return the final result
    return maskedShad;
}
