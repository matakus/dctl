#line 2

// Saturation and Density adjustments DCTL v1.06
// Author: Matt.C
// Description: Adjusts Saturation and Density of an image with masks to restore detail in shadows and highlights

//------------------------------------------------------------------------------
// UI PARAMETERS
//------------------------------------------------------------------------------

DEFINE_UI_PARAMS(saturation, Saturation, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.01)
DEFINE_UI_TOOLTIP(Saturation, "Saturation adjustment")

DEFINE_UI_PARAMS(vibrance, Vibrance, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.01)
DEFINE_UI_TOOLTIP(Vibrance, "Saturation adjustment relative to Input Saturation")

DEFINE_UI_PARAMS(density, Density, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01)
DEFINE_UI_TOOLTIP(Density, "Adjusts overall brightness with protection for saturated highlights")

DEFINE_UI_PARAMS(highlightRecovery, Highlight Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Highlight Recovery, "Preserves original values in the highlights")

DEFINE_UI_PARAMS(shadowRecovery, Shadow Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Shadow Recovery, "Preserves original values in the shadows")

DEFINE_UI_PARAMS(densityRecovery, Density Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Density Recovery, "Prevents areas getting too dark")

DEFINE_UI_PARAMS(shineRecovery, Shine, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Shine, "Preserves original values in bright, unsaturated areas")

DEFINE_UI_PARAMS(showMask, View Mask, DCTLUI_CHECK_BOX, 0)

//------------------------------------------------------------------------------
// REFERENCE VALUES
//------------------------------------------------------------------------------

#define EPSILON 1e-6f  // Small value to prevent division-by-zero errors

//------------------------------------------------------------------------------
// HELPER FUNCTIONS
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Function: powf
// Description: Computes the power function for a float base and exponent,
//              ensuring that the sign of the base is preserved.
// Parameters:
//   base - The base value.
//   exp  - The exponent value.
// Returns:
//   The result of raising base to the power exp, preserving the base's sign.
//------------------------------------------------------------------------------

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

//------------------------------------------------------------------------------
// Function: mixf
// Description: Mixes two float values based on factor t.
// Parameters:
//   a - The first value.
//   b - The second value.
//   t - The interpolation factor.
// Returns:
//   The interpolated value: a * (1 - t) + b * t.
//------------------------------------------------------------------------------
__DEVICE__ float mixf(float a, float b, float t) {
    return a * (1.0f - t) + b * t;
}

//------------------------------------------------------------------------------
// Function: mix3
// Description: Mixes two float3 colors with gamma adjustment for smoother blending.
// Parameters:
//   a - The first color (float3).
//   b - The second color (float3).
//   t - The interpolation factor.
// Returns:
//   The interpolated color as a float3.
//------------------------------------------------------------------------------

__DEVICE__ float3 mix3(float3 a, float3 b, float t) {
    t = powf(t, 1.5f); // Apply gamma to smooth the blending transition
    return make_float3(
        a.x * (1.0f - t) + b.x * t,
        a.y * (1.0f - t) + b.y * t,
        a.z * (1.0f - t) + b.z * t
    );
}
//------------------------------------------------------------------------------
// Function: luminance
// Description: Computes the luminance (perceived brightness) of an RGB color.
//              Uses Rec. 709 coefficients.
//------------------------------------------------------------------------------

__DEVICE__ float luminance(float3 rgb) {
    return 0.2126f * rgb.x + 0.7152f * rgb.y + 0.0722f * rgb.z;
}

//------------------------------------------------------------------------------
// Function: calculate_saturation
// Description: Calculates the saturation of an RGB color.
//              Saturation is defined as the difference between the maximum and minimum
//              channel values normalized by the maximum value.
// Parameters:
//   rgb - The input color as a float3 (R, G, B).
// Returns:
//   The saturation level (returns 0.0 if the color is black).
//------------------------------------------------------------------------------
__DEVICE__ float calculate_saturation(float3 rgb) {
    float maxVal = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float minVal = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    return maxVal == 0.0f ? 0.0f : (maxVal - minVal) / maxVal;
}

//------------------------------------------------------------------------------
// Function: find_max_component
// Description: Finds the maximum component value (R, G, or B) from an RGB color.
// Parameters:
//   color - The input color as a float3 (R, G, B).
// Returns:
//   The maximum of the R, G, and B values.
//------------------------------------------------------------------------------

__DEVICE__ float find_max_component(float3 color) {
    return _fmaxf(_fmaxf(color.x, color.y), color.z);
}

//------------------------------------------------------------------------------
// Function: apply_per_channel_gamma
// Description: Applies per-channel gamma correction to an RGB color.
// Parameters:
//   color - The input color as a float3 (R, G, B).
//   exp   - The gamma exponent values as a float3 for each channel.
// Returns:
//   The gamma-corrected color as a float3.
//------------------------------------------------------------------------------

__DEVICE__ float3 apply_per_channel_gamma(float3 color, float3 exp) {
    return make_float3(powf(color.x, exp.x), powf(color.y, exp.y), powf(color.z, exp.z));
}

//------------------------------------------------------------------------------
// Function: compute_value_max_component
// Description: Computes the maximum channel value of an RGB color.
// Parameters:
//   color - The input color as a float3 (R, G, B).
// Returns:
//   The maximum value among the color's components.
//------------------------------------------------------------------------------

__DEVICE__ float compute_value_max_component(float3 color) {
    return find_max_component(color);
}

//------------------------------------------------------------------------------
// Function: compute_density_mean
// Description: Computes the mean of the RGB components, serving as an indicator of overall density.
// Parameters:
//   rgb - The input color as a float3 (R, G, B).
// Returns:
//   The average of the R, G, and B values.
//------------------------------------------------------------------------------

__DEVICE__ float compute_density_mean(float3 rgb) {
    return (rgb.x + rgb.y + rgb.z) / 3.0;
}

//------------------------------------------------------------------------------
// Function: calculate_saturation_tetrahedral
// Description: Calculates color saturation using a tetrahedral approach, which
//              provides smoother transitions and better handling of near-neutral
//              colors compared to traditional min/max methods.
//
// Parameters:
//   rgb - Input color as float3 (RGB values should be in range [0,1])
//
// Returns:
//   float - Saturation value in range [0,1]
//          0.0 = Completely desaturated (grayscale)
//          1.0 = Fully saturated
//
// Implementation Details:
//   1. Finds max, min, and middle RGB components to determine color position
//      within the RGB cube
//   2. Uses tetrahedral interpolation by considering the middle component's
//      position relative to min/max
//   3. Weights the middle component (0.5) to smooth transitions between
//      different color regions
//   4. Includes safeguards against division by zero for very dark colors
//
// Mathematical Background:
//   - Traditional saturation = (max-min)/max
//   - Tetrahedral adds mid component consideration for better color space
//     handling, especially in areas where two channels are similar
//------------------------------------------------------------------------------

__DEVICE__ float calculate_saturation_tetrahedral(float3 rgb) {
    float r = rgb.x;
    float g = rgb.y;
    float b = rgb.z;
    
    // Find the min and max components
    float max_rgb = _fmaxf(_fmaxf(r, g), b);
    float min_rgb = _fminf(_fminf(r, g), b);
    
    // Find the mid component using conditional logic
    float mid_rgb;
    if (r > g) {
        if (g > b) mid_rgb = g;       // Case: r > g > b
        else if (r > b) mid_rgb = b;  // Case: r > b > g
        else mid_rgb = r;             // Case: b > r > g
    } else {
        if (r > b) mid_rgb = r;       // Case: g > r > b
        else if (g > b) mid_rgb = b;  // Case: g > b > r
        else mid_rgb = g;             // Case: b > g > r
    }
    
    // Protect against division by zero for very dark colors
    if (max_rgb < EPSILON) return 0.0f;
    
    // Calculate color differences for tetrahedral interpolation
    float chroma = max_rgb - min_rgb;
    float mid_diff = mid_rgb - min_rgb;
    
    // Calculate saturation with middle component weighting
    float saturation = (chroma + mid_diff * 0.5f) / (_fmaxf(max_rgb, 0.0001f));
    
    // Ensure output is in valid range [0,1]
    return _fminf(saturation, 1.0f);
}

//------------------------------------------------------------------------------
// SATURATION AND DENSITY FUNCTIONS
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Function: adjust_density
// Description: Adjusts the density (brightness) of a color while preserving detail in saturated highlights.
//              The process includes normalizing the color, applying gamma correction, and blending the
//              adjusted color with the original based on a recovery mask.
// Parameters:
//   color         - The input color as a float3 (R, G, B).
//   gamma         - Gamma correction factors as a float3.
//   density_mixer - Controls the mix between maximum channel value and average density.
//   feather       - Controls the strength of recovery (feathering) for bright, saturated areas.
// Returns:
//   The density-adjusted color as a float3.
//------------------------------------------------------------------------------

__DEVICE__ float3 adjust_density(float3 color, float3 gamma, float density_mixer, float feather) {
    float max_channel_value = compute_value_max_component(color);
    float3 normalized_color = color / _fmaxf(max_channel_value, 0.00001f);

    float density = compute_density_mean(color);
    density = _mix(_fmaxf(max_channel_value, 0.0f), _fmaxf(density, 0.0f), density_mixer - 1.0);

    float sat = calculate_saturation(color);
    float recoveryMask = max_channel_value * sat;
    
    float protectionStrength = feather * _fminf(recoveryMask, 1.0f);

    float3 adjusted_color = apply_per_channel_gamma(normalized_color, gamma);
    adjusted_color.x = _fmaxf(adjusted_color.x * density, 0.0f);
    adjusted_color.y = _fmaxf(adjusted_color.y * density, 0.0f);
    adjusted_color.z = _fmaxf(adjusted_color.z * density, 0.0f);

    return _mix(adjusted_color, color, protectionStrength);
}

//------------------------------------------------------------------------------
// Function: adjustSaturation
// Description: Adjusts the saturation of an RGB color.
//              Computes an achromatic value (the maximum channel), determines the distance of each channel
//              from this value, and adjusts that distance based on the saturation parameter.
// Parameters:
//   rgb - The input color as a float3 (R, G, B).
//   sat - The saturation adjustment factor (1.0 implies no change).
// Returns:
//   The saturation-adjusted color as a float3.
//------------------------------------------------------------------------------

__DEVICE__ float3 adjustSaturation(float3 rgb, float sat) {
    sat -= 1.0f; // Offset: 1.0 means no adjustment

    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float3 distance = ach == 0.0f ? make_float3(0.0f, 0.0f, 0.0f) : (ach - rgb) / _fabs(ach);
    distance *= (1.0f + sat);

    float3 newRGB = ach - distance * _fabs(ach);

    return newRGB;
}

//------------------------------------------------------------------------------
// Function: adjustVibrance
// Description: Adjusts the vibrance of an RGB color using a falloff effect based on current saturation.
//              This function uses a logarithmic approach to achieve a subtler saturation adjustment that
//              protects extreme values.
// Parameters:
//   rgb      - The input color as a float3 (R, G, B).
//   vibrance - The vibrance adjustment factor (1.0 implies no change).
// Returns:
//   The vibrance-adjusted color as a float3.
//------------------------------------------------------------------------------

__DEVICE__ float3 adjustVibrance(float3 rgb, float vibrance) {
    vibrance -= 1.0f;
    
    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float minColor = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    float safeDivisor = _fmaxf(ach, EPSILON);
    
    float currentSaturation = (ach - minColor) / safeDivisor;
    currentSaturation = _fmaxf(0.0f, _fminf(1.0f, currentSaturation));
    
    float smoothFactor = 0.1f;
    float safeLogInput = _fmaxf(1.0f + currentSaturation, EPSILON);
    
    float adjustedVibranceEffect = vibrance > 0 ?
        1.0f + (1.0f - currentSaturation * (1.0f - smoothFactor * _logf(safeLogInput))) * vibrance :
        1.0f + currentSaturation * (1.0f - smoothFactor * _logf(safeLogInput)) * vibrance;
    
    float3 distance;
    if (ach < EPSILON) {
        distance = make_float3(0.0f, 0.0f, 0.0f);
    } else {
        distance = (ach - rgb) / ach;
    }
    
    distance *= adjustedVibranceEffect;
    
    float3 newRGB;
    float safeAch = _fmaxf(ach, EPSILON);
    newRGB.x = _fmaxf(_fminf(ach - distance.x * safeAch, 1.0f), 0.0f);
    newRGB.y = _fmaxf(_fminf(ach - distance.y * safeAch, 1.0f), 0.0f);
    newRGB.z = _fmaxf(_fminf(ach - distance.z * safeAch, 1.0f), 0.0f);
    
    return newRGB;
}

//------------------------------------------------------------------------------
// MAIN FUNCTION
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Function: transform
// Description: Main image transformation function that applies targeted color
// adjustments with sophisticated recovery mechanisms. The process includes:
// 1. Analyzing pixel brightness and calculating a base highlight mask.
// 2. Computing saturation level and creating an inverse saturation mask.
// 3. Implementing screen-blend highlight recovery for natural rolloff.
// 4. Building density protection masks for saturated shadow areas.
// 5. Applying sequential adjustments: density, vibrance, and saturation.
// 6. Computing highlight and shadow recovery based on luminance.
// 7. Performing two-stage blending with recovery masks.
// 8. Providing optional mask visualization for debugging.
//
// Parameters:
// p_Width, p_Height - Full image dimensions.
// p_X, p_Y - Pixel coordinates in full image space.
// p_R, p_G, p_B - Input color values (expected in 0.0 to 1.0 range).
//
// Global Parameters:
// saturation - Global saturation adjustment strength.
// vibrance - Smart saturation adjustment strength.
// density - Base density adjustment strength.
// highlightRecovery - Controls preservation of highlight detail.
// shadowRecovery - Controls preservation of shadow detail.
// densityRecovery - Controls protection of saturated dark areas.
// shineRecovery - Controls the strength of highlight recovery preservation.
// showMask - Enables visualization of internal masks.
//
// Returns:
// The final output color (float3) after all adjustments and recoveries.
//------------------------------------------------------------------------------

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {

    //-------------------------------------------------------
    // 1. Initial Brightness and Saturation Analysis
    //-------------------------------------------------------
    float3 rgb = make_float3(p_R, p_G, p_B);
    float brightness = (rgb.x + rgb.y + rgb.z) / 3.0f;
    float falloff = 1.0f;
    float highlightMask = _fminf(_fmaxf(brightness / falloff, 0.0f), 1.0f);

    float sat = calculate_saturation(rgb);
    float saturationThreshold = 0.25f;
    float saturationMask = 1.0f - _fminf(_fmaxf((sat - saturationThreshold) / 0.25f, 0.0f), 1.0f);

    //-------------------------------------------------------
    // 2. Advanced Highlight Recovery with Screen-like Blend
    //-------------------------------------------------------
    // Use screen blend formula for smoother highlight rolloff:
    // Screen(A,B) = 1 - (1-A)(1-B)
    float boostedHighlight = _fminf(highlightMask, 1.0f);
    float screenHighlight = 1.0f - (1.0f - boostedHighlight) * (1.0f - highlightMask);
    float combinedHighlightMask = screenHighlight * saturationMask;
    float shineMask = combinedHighlightMask * shineRecovery;

    //-------------------------------------------------------
    // 3. Density Protection for Dark Saturated Areas
    //-------------------------------------------------------
    // Create targeted protection for saturated shadows
    float satProtectThreshold = 0.25f;
    float protectFalloff = 0.1f;  // Sharper falloff for more precise control
    float satProtectMask = _fminf(_fmaxf((sat - satProtectThreshold) / protectFalloff, 0.0f), 1.0f);
    float darknessMask = 1.0f - brightness;  // Progressive protection in darker areas
    float densityProtectMask = satProtectMask * darknessMask * densityRecovery;

    //-------------------------------------------------------
    // 4. Recovery Mask Combination and Color Adjustments
    //-------------------------------------------------------
    // Combine shine and density protection
    float totalRecoveryMask = _fminf(shineMask + densityProtectMask, 1.0f);
    
    // Apply sequential color adjustments
    float3 densityAdjustedRGB = adjust_density(rgb, make_float3(1.0, 1.0, 1.0), density, 0.0f);
    float3 vibranceAdjustedRGB = adjustVibrance(densityAdjustedRGB, vibrance);
    float3 adjustedRGB = adjustSaturation(vibranceAdjustedRGB, saturation);

    //-------------------------------------------------------
    // 5. Highlight and Shadow Recovery
    //-------------------------------------------------------
    // Calculate luminance-based recovery masks
    float luma = (rgb.x + rgb.y + rgb.z) / 3.0f;
    float highlightMaskStrength = luma * highlightRecovery;
    float shadowMaskStrength = (1.0f - luma) * shadowRecovery;
    
    // Combine recovery masks for final blend control
    float recoveryMask = _fminf(highlightMaskStrength + shadowMaskStrength, 1.0f);
    float totalMask = _fminf(highlightMaskStrength + shadowMaskStrength + totalRecoveryMask, 1.0f);

    //-------------------------------------------------------
    // 6. Final Blending and Output
    //-------------------------------------------------------
    // Two-stage blending for precise control
    float3 maskedAdjustment = mix3(rgb, adjustedRGB, 1.0f - totalRecoveryMask);
    float3 outRGB = maskedAdjustment * (1.0f - recoveryMask) + rgb * recoveryMask;

    // Mask visualization
    if (showMask) {
        return make_float3(totalMask, totalMask, totalMask);
    }

    return outRGB;
}