#include "zCCTF.dctl"
#line 2

// Saturation and Density adjustments DCTL v1.07
// Author: Matt.C
// Description: Adjusts Saturation and Density with recovery masks and Helmholtz-Kohlrausch effect compensation

//------------------------------------------------------------------------------
// UI PARAMETERS
//------------------------------------------------------------------------------

DEFINE_UI_PARAMS(saturation, Saturation, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.01)
DEFINE_UI_TOOLTIP(Saturation, "Saturation adjustment")

DEFINE_UI_PARAMS(vibrance, Vibrance, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.01)
DEFINE_UI_TOOLTIP(Vibrance, "Saturation adjustment relative to Input Saturation")

DEFINE_UI_PARAMS(vibranceBalance, Vibrance Balance, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Vibrance Balance, "Balance between Targeted vs Uniform")

DEFINE_UI_PARAMS(density, Density, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01)
DEFINE_UI_TOOLTIP(Density, "Adjusts overall brightness with protection for saturated highlights")

DEFINE_UI_PARAMS(helmholtzEffect, Helmholtz Effect, DCTLUI_SLIDER_FLOAT, 0, -1.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Helmholtz Effect, "Helmholtz-Kohlrausch effect strength")

DEFINE_UI_PARAMS(highlightRecovery, Highlight Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Highlight Recovery, "Preserves original values in the highlights")

DEFINE_UI_PARAMS(shadowRecovery, Shadow Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Shadow Recovery, "Preserves original values in the shadows")

DEFINE_UI_PARAMS(densityRecovery, Density Recovery, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Density Recovery, "Prevents areas getting too dark")

DEFINE_UI_PARAMS(shineRecovery, Shine, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_TOOLTIP(Shine, "Preserves original values in bright, unsaturated areas")

DEFINE_UI_PARAMS(hkMethod, HK Method, DCTLUI_COMBO_BOX, 1, {VAC, VCC}, {Strong, Subtle})
DEFINE_UI_TOOLTIP(HK Method, "Variable Achromatic Color (stronger) or Variable Chromatic Color (subtle)")

DEFINE_UI_PARAMS(showMask, View Mask, DCTLUI_CHECK_BOX, 0)

#define EPSILON_VALUE 1e-6f
__CONSTANT__ float pi = 3.14159265358979323846f;

//------------------------------------------------------------------------------
// HELPER FUNCTIONS
//------------------------------------------------------------------------------

// Angle conversion
__DEVICE__ float radians(float d) {return d * (pi / 180.0f);}
__DEVICE__ float degrees(float r) {return r * (180.0f / pi);}
__DEVICE__ float3 maxf3(float3 a, float b) { 
    return make_float3(_fmaxf(a.x, b), _fmaxf(a.y, b), _fmaxf(a.z, b)); 
}

// Preserves sign when raising to a power
__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

// Mixes two colors with gamma smoothing
__DEVICE__ float3 mix3(float3 a, float3 b, float t) {
    t = powf(t, 1.5f);
    return make_float3(
        a.x * (1.0f - t) + b.x * t,
        a.y * (1.0f - t) + b.y * t,
        a.z * (1.0f - t) + b.z * t
    );
}

// Calculates RGB saturation
__DEVICE__ float calculate_saturation(float3 rgb) {
    float maxVal = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float minVal = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    return maxVal == 0.0f ? 0.0f : (maxVal - minVal) / maxVal;
}

// Returns max RGB component
__DEVICE__ float find_max_component(float3 color) {
    return _fmaxf(_fmaxf(color.x, color.y), color.z);
}

// Applies per-channel gamma correction
__DEVICE__ float3 apply_per_channel_gamma(float3 color, float3 exp) {
    return make_float3(powf(color.x, exp.x), powf(color.y, exp.y), powf(color.z, exp.z));
}

// Wrapper for find_max_component
__DEVICE__ float compute_value_max_component(float3 color) {
    return find_max_component(color);
}

// Returns RGB average
__DEVICE__ float compute_density_mean(float3 rgb) {
    return (rgb.x + rgb.y + rgb.z) / 3.0;
}

// Extract value range from e0 to e1, clamped
__DEVICE__ float extract(float e0, float e1, float x) {
    return _clampf((x - e0) / (e1 - e0), 0.0f, 1.0f);
}

// Window function for hue angle extraction
__DEVICE__ float extract_window(float e0, float e1, float e2, float e3, float x) {
    return x < e1 ? extract(e0, e1, x) : extract(e3, e2, x);
}

// Extract hue angle based on parameters
__DEVICE__ float extract_hue_angle(float h, float o, float w, int sm) {
    float hc = extract_window(2.0f - w, 2.0f, 2.0f, 2.0f + w, _fmod(h + o, 6.0f));
    if (sm == 1)
      hc = hc * hc * (3.0f - 2.0f * hc); // smoothstep
    return hc;
}

// Calculate hue (0-6 range)
__DEVICE__ float calc_hue(float3 rgb) {
    float mx = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float mn = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    float ch = mx - mn;
    float h = 0.0f;
    if (ch == 0.0f) h = 0.0f;
    else if (mx == rgb.x) h = _fmod((rgb.y - rgb.z) / ch + 6.0f, 6.0f);
    else if (mx == rgb.y) h = (rgb.z - rgb.x) / ch + 2.0f;
    else if (mx == rgb.z) h = (rgb.x - rgb.y) / ch + 4.0f;
    return h;
}

//------------------------------------------------------------------------------
// ADJUSTMENT FUNCTIONS
//------------------------------------------------------------------------------

// Adjusts brightness while preserving saturated highlights
__DEVICE__ float3 adjust_density(float3 color, float3 gamma, float density_mixer, float feather) {
    if (density_mixer == 1.0f && feather == 0.0f) {
        return color;
    }
    
    float max_channel_value = compute_value_max_component(color);
    float3 normalized_color = color / _fmaxf(max_channel_value, EPSILON_VALUE);

    float density = compute_density_mean(color);
    density = _mix(_fmaxf(max_channel_value, 0.0f), _fmaxf(density, 0.0f), density_mixer - 1.0);

    float sat = calculate_saturation(color);
    float recoveryMask = max_channel_value * sat;
    
    float protectionStrength = feather * _fminf(recoveryMask, 1.0f);

    float3 adjusted_color = apply_per_channel_gamma(normalized_color, gamma);
    adjusted_color.x = _fmaxf(adjusted_color.x * density, 0.0f);
    adjusted_color.y = _fmaxf(adjusted_color.y * density, 0.0f);
    adjusted_color.z = _fmaxf(adjusted_color.z * density, 0.0f);

    return _mix(adjusted_color, color, protectionStrength);
}

// Adjusts RGB saturation
__DEVICE__ float3 adjustSaturation(float3 rgb, float sat) {
    if (sat == 1.0f) {
        return rgb;
    }
    
    sat -= 1.0f;
    const float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    
    // Return original RGB for very dark/black pixels or negative values
    if (ach <= EPSILON_VALUE || ach <= -10.0f) {
        return rgb;
    }
    
    const float scale = 1.0f / _fabs(ach);
    const float factor = (1.0f + sat);
    
    return ach - ((ach - rgb) * scale * factor * _fabs(ach));
}

// Vibrance with hue targeting. 
__DEVICE__ float3 adjustVibranceOriginal(float3 rgb, float vibrance)
{
    float mgl = vibrance - 1.0f;
    
    if (_fabs(mgl) < 0.005f) {
        return rgb;
    }
    
    const float p_base = 3.0f;
    const float mgl_str = _powf(p_base, mgl);
    
    const float3 pp = make_float3(mgl_str, mgl_str, mgl_str);
    const float3 ps = make_float3(
        mgl_str,
        mgl_str,
        _powf(p_base / 1.5f, mgl)
    );
    
    float n = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    
    float3 r = (n == 0.0f) ? make_float3(0.0f, 0.0f, 0.0f) : rgb / n;
    r = make_float3(_fmaxf(r.x, -1.0f), _fmaxf(r.y, -1.0f), _fmaxf(r.z, -1.0f));
    
    float h = calc_hue(r);
    float c = 1.0f - _fminf(r.x, _fminf(r.y, r.z));
    
    float3 r_hl = r;
    
    float3 hp = make_float3(
        extract_hue_angle(h, 2.0f, 1.0f, 0),
        extract_hue_angle(h, 6.0f, 1.0f, 0),
        extract_hue_angle(h, 4.0f, 1.0f, 0)
    );
    hp = hp * c;
    
    float3 hs = make_float3(
        extract_hue_angle(h, 5.0f, 1.0f, 0),
        extract_hue_angle(h, 3.0f, 1.0f, 0),
        extract_hue_angle(h, 1.0f, 1.0f, 0)
    );
    hs = hs * c;
    
    // Primary hue angle adjustments
    if (r.x >= 0.0f) {
        r.x = _powf(r.x, pp.x) * hp.x + _powf(r.x, pp.y) * hp.y + _powf(r.x, pp.z) * hp.z + r.x * 
            (1.0f - (hp.x + hp.y + hp.z));
    }
    if (r.y >= 0.0f) {
        r.y = _powf(r.y, pp.x) * hp.x + _powf(r.y, pp.y) * hp.y + _powf(r.y, pp.z) * hp.z + r.y * 
            (1.0f - (hp.x + hp.y + hp.z));
    }
    if (r.z >= 0.0f) {
        r.z = _powf(r.z, pp.x) * hp.x + _powf(r.z, pp.y) * hp.y + _powf(r.z, pp.z) * hp.z + r.z * 
            (1.0f - (hp.x + hp.y + hp.z));
    }
    
    // Secondary hue angle adjustments
    if (r.x >= 0.0f) {
        r.x = _powf(r.x, ps.x) * hs.x + _powf(r.x, ps.y) * hs.y + _powf(r.x, ps.z) * hs.z + r.x * 
            (1.0f - (hs.x + hs.y + hs.z));
    }
    if (r.y >= 0.0f) {
        r.y = _powf(r.y, ps.x) * hs.x + _powf(r.y, ps.y) * hs.y + _powf(r.y, ps.z) * hs.z + r.y * 
            (1.0f - (hs.x + hs.y + hs.z));
    }
    if (r.z >= 0.0f) {
        r.z = _powf(r.z, ps.x) * hs.x + _powf(r.z, ps.y) * hs.y + _powf(r.z, ps.z) * hs.z + r.z * 
            (1.0f - (hs.x + hs.y + hs.z));
    }
    
    // Chromaticity-linear adjustments
    float vf, m;
    
    // Primaries
    vf = c == 0.0f || c > 1.0f ? 1.0f : 
        ((1.0f - _powf(1.0f - c, pp.x)) * hp.x + (1.0f - _powf(1.0f - c, pp.y)) * hp.y + 
        (1.0f - _powf(1.0f - c, pp.z)) * hp.z + c * (1.0f - (hp.x + hp.y + hp.z))) / c;
    m = 1.1f;
    r_hl = m * (1.0f - vf) + r_hl * vf;
    
    // Secondaries
    vf = c == 0.0f || c > 1.0f ? 1.0f : 
        ((1.0f - _powf(1.0f - c, ps.x)) * hs.x + (1.0f - _powf(1.0f - c, ps.y)) * hs.y + 
        (1.0f - _powf(1.0f - c, ps.z)) * hs.z + c * (1.0f - (hs.x + hs.y + hs.z))) / c;
    m = 1.0f;
    r_hl = m * (1.0f - vf) + r_hl * vf;
    
    // Mix hue-linear and direct adjustments
    const float hl = 0.5f;
    r = r * (1.0f - hl) + r_hl * hl;
    
    return r * n;
}

// Uniform vibrance algorithm
__DEVICE__ float3 adjustVibranceUniform(float3 rgb, float vibrance)
{
    float mgl = vibrance - 1.0f;
    
    if (_fabs(mgl) < 0.005f) {
        return rgb;
    }
    
    // Use a simpler, more uniform approach for vibrance
    float luma = 0.2126f * rgb.x + 0.7152f * rgb.y + 0.0722f * rgb.z; // Rec. 709 luma
    float maxRGB = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    float minRGB = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
    float sat = (maxRGB - minRGB) / (_fmaxf(maxRGB, EPSILON_VALUE));
    
    float adjustment = 1.0f + mgl; // Linear adjustment factor
    
    // Apply a smooth curve to the adjustment for more uniform effect
    if (mgl > 0.0f) {
        // Increasing vibrance (positive mgl)
        adjustment = 1.0f + _powf(sat, 0.25f) * mgl; // Less aggressive on highly saturated colors
    } else {
        // Decreasing vibrance (negative mgl)
        adjustment = 1.0f + sat * mgl; // Linear reduction based on saturation
    }
    
    // Apply adjustment uniformly across all colors
    float3 result = make_float3(
        luma + adjustment * (rgb.x - luma),
        luma + adjustment * (rgb.y - luma),
        luma + adjustment * (rgb.z - luma)
    );
    
    return result;
}

// Blended vibrance function
__DEVICE__ float3 adjustVibrance(float3 rgb, float vibrance, float vibranceBalance)
{
    // Early exit for neutral vibrance
    if (_fabs(vibrance - 1.0f) < 0.005f) {
        return rgb;
    }
    
    // Process with both algorithms
    float3 original = adjustVibranceOriginal(rgb, vibrance);
    float3 uniform = adjustVibranceUniform(rgb, vibrance);
    
    // Apply smooth blending based on vibranceBalance parameter
    // Apply smoothstep for more intuitive control
    float blend = vibranceBalance * vibranceBalance * (3.0f - 2.0f * vibranceBalance);
    
    // Mix the results
    return make_float3(
        original.x * (1.0f - blend) + uniform.x * blend,
        original.y * (1.0f - blend) + uniform.y * blend,
        original.z * (1.0f - blend) + uniform.z * blend
    );
}

// Calculate Helmholtz-Kohlrausch effect compensation directly from XYZ
__DEVICE__ float calculateHelmholtzEffect(float3 xyz, int method) {
    // Function now accepts XYZ directly instead of RGB
    
    // Ensure non-negative XYZ values
    xyz = maxf3(xyz, 0.0f);
    
    // D65 white point
    float2 w_xy = make_float2(0.3127f, 0.329f);
    const float w_uv_d = (-2.0f * w_xy.x + 12.0f * w_xy.y + 3.0f);
    const float2 w_uv = make_float2(4.0f * w_xy.x / w_uv_d, 9.0f * w_xy.y / w_uv_d);
    
    // Convert XYZ to L*u'v'
    float d = xyz.x + 15.0f * xyz.y + 3.0f * xyz.z;
    const float _e = 216.0f / 24389.0f;
    const float _k = 24389.0f / 27.0f;
    float3 Luv = make_float3(
        (xyz.y > _e ? 116.0f * _powf(xyz.y, 1.0f / 3.0f) - 16.0f : xyz.y * _k) / 100.0f,
        d == 0.0f ? 0.0f : 4.0f * xyz.x / d,
        d == 0.0f ? 0.0f : 9.0f * xyz.y / d
    );

    // Calculate Nayatani 1997 Helmholtz-Kohlrausch compensation factor
    float m = method == 0 ? -0.866f : -0.134f; // VAC vs VCC
    const float K_Br = 0.2717f * (6.469f + 6.362f * _powf(63.61f, 0.4495f)) / (6.469f + _powf(63.61f, 0.4495f));

    // Hue angle in radians
    float h = _atan2f(Luv.z - w_uv.y, Luv.y - w_uv.x);
    h = h < 0.0f ? h + radians(360.0f) : h;

    float q = -0.01585f - 0.03017f * _cosf(h) - 0.04556f * _cosf(2.0f * h) - 0.02667f * _cosf(3.0f * h) - 0.00295f * _cosf(4.0f * h) 
              + 0.14592f * _sinf(h) + 0.05084f * _sinf(2.0f * h) - 0.01900f * _sinf(3.0f * h) - 0.00764f * _sinf(4.0f * h);
    float S_uv = 13.0f * _hypotf(Luv.y - w_uv.x, Luv.z - w_uv.y);

    float s = (1.0f + (m * q + 0.0872f * K_Br) * S_uv);
    s = s == 0.0f ? 1.0f : 1.0f / s;
    
    return s;
}

//------------------------------------------------------------------------------
// MAIN FUNCTION
//------------------------------------------------------------------------------

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(p_R, p_G, p_B);
    
    // Early exit for default values
    if (saturation == 1.0f && vibrance == 1.0f && density == 1.0f && 
        highlightRecovery == 0.0f && shadowRecovery == 0.0f && 
        densityRecovery == 0.0f && shineRecovery == 0.0f && 
        helmholtzEffect == 1.0f && !showMask) {
        return rgb;
    }
    
    //-------------------------------------------------------
    // Brightness and Saturation Analysis
    //-------------------------------------------------------
    float brightness = (rgb.x + rgb.y + rgb.z) / 3.0f;
    float highlightMask = _fminf(_fmaxf(brightness, 0.0f), 1.0f);

    float sat = calculate_saturation(rgb);
    float saturationThreshold = 0.25f;
    float saturationMask = 1.0f - _fminf(_fmaxf((sat - saturationThreshold) / 0.25f, 0.0f), 1.0f);

    //-------------------------------------------------------
    // Highlight Recovery Mask
    //-------------------------------------------------------
    float boostedHighlight = _fminf(highlightMask, 1.0f);
    float screenHighlight = 1.0f - (1.0f - boostedHighlight) * (1.0f - highlightMask);
    float combinedHighlightMask = screenHighlight * saturationMask;
    float shineMask = combinedHighlightMask * shineRecovery;

    //-------------------------------------------------------
    // Shadow Protection Mask
    //-------------------------------------------------------
    float satProtectThreshold = 0.25f;
    float protectFalloff = 0.25f;
        
    float t = (sat - satProtectThreshold) / protectFalloff;
    t = _fmaxf(0.0f, _fminf(1.0f, t));
    float satProtectMask = t * t * (3.0f - 2.0f * t);
        
    float darknessGamma = 2.0f;
    float darknessMask = powf(1.0f - brightness, darknessGamma);
        
    float densityStrength = densityRecovery * densityRecovery;
    float densityProtectMask = satProtectMask * darknessMask * densityStrength;
        
    float edgeRadius = 0.1f;
    densityProtectMask = _fmaxf(0.0f, _fminf(1.0f, 
        densityProtectMask * (1.0f - _powf(_fmaxf(0.0f, brightness - (1.0f - edgeRadius)), 0.5f))
    ));

    //-------------------------------------------------------
    // Apply Adjustments
    //-------------------------------------------------------
    float totalRecoveryMask = _fminf(shineMask + densityProtectMask, 1.0f);

    float3 densityAdjustedRGB = adjust_density(rgb, make_float3(1.0, 1.0, 1.0), density, 0.0f);
    // Pass vibranceBalance to the adjustVibrance function
    float3 vibranceAdjustedRGB = adjustVibrance(densityAdjustedRGB, vibrance, vibranceBalance);
    float3 adjustedRGB = adjustSaturation(vibranceAdjustedRGB, saturation);

    //-------------------------------------------------------
    // Recovery and Initial Blend
    //-------------------------------------------------------
    float luma = (rgb.x + rgb.y + rgb.z) / 3.0f;
    float highlightMaskStrength = luma * highlightRecovery;
    float shadowMaskStrength = (1.0f - luma) * shadowRecovery;
    
    float recoveryMask = _fminf(highlightMaskStrength + shadowMaskStrength, 1.0f);
    float totalMask = _fminf(highlightMaskStrength + shadowMaskStrength + totalRecoveryMask, 1.0f);

    float3 maskedAdjustment = mix3(rgb, adjustedRGB, 1.0f - totalRecoveryMask);
    float3 outRGB = maskedAdjustment * (1.0f - recoveryMask) + rgb * recoveryMask;

    // Mask visualization
    if (showMask) {
        return make_float3(totalMask, totalMask, totalMask);
    }
    
    //-------------------------------------------------------
    // Apply Helmholtz-Kohlrausch Effect
    //-------------------------------------------------------
    if (helmholtzEffect != 1.0f) {
        // Convert from DaVinci Intermediate (log) to linear RGB
        float3 linearRGB = logToLinDavinciIntermediate(outRGB);
        
        // Convert from DaVinci Wide Gamut RGB to XYZ
        float3 xyzColor = DaVinciWideGamuttoXYZ(linearRGB);
        
        // Calculate the Helmholtz-Kohlrausch effect using XYZ values
        float hkFactor = calculateHelmholtzEffect(xyzColor, hkMethod);
        
        // Scale the effect based on strength parameter (1.0 is neutral)
        if (helmholtzEffect < 1.0f) {
            // Invert effect for values < 1.0
            hkFactor = 1.0f + (1.0f - helmholtzEffect) * (1.0f / hkFactor - 1.0f);
        } else if (helmholtzEffect > 1.0f) {
            // Increase effect for values > 1.0
            hkFactor = _powf(hkFactor, (helmholtzEffect - 1.0f) * 2.0f + 1.0f);
        } else {
            // At exactly 1.0, no effect (hkFactor = 1.0)
            hkFactor = 1.0f;
        }
        
        // Apply the HK effect to linear RGB values
        linearRGB *= hkFactor;
        
        // Convert back to XYZ
        xyzColor = DaVinciWideGamuttoXYZ(linearRGB);
        
        // Convert back to DaVinci Wide Gamut RGB (linear)
        linearRGB = XYZtoDaVinciWideGamut(xyzColor);
        
        // Convert back to DaVinci Intermediate (log)
        outRGB = linToLogDavinciIntermediate(linearRGB);
    }

    return outRGB;
}